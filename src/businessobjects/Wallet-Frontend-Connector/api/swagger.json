{
  "openapi": "3.0.1",
  "info": {
    "title": "TFX API - V1",
    "version": "v1"
  },
  "paths": {
    "/accounts/{account_id}/balance": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get balance",
        "operationId": "GetAccountBalance",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/accounts/{account_id}/transactions": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get transactions",
        "operationId": "GetAccountTransactions",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/accounts/{account_id}/direct-debits": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get direct debits",
        "operationId": "GetDirectDebits",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/accounts/{account_id}/direct-debits/{direct_debit_id}": {
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete direct debit",
        "operationId": "DeleteDirectDebit",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direct_debit_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/accounts/{account_id}/standing-orders": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get standing orders",
        "operationId": "StandingOrders",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/accounts/{account_id}/standing-orders/{standing_order_id}": {
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete standing order",
        "operationId": "DeleteStandingOrder",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "standing_order_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/accounts/{account_id}/payees": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Save new payee",
        "operationId": "SaveNewPayee",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayeeRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayeeRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayeeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get payees",
        "operationId": "GetPayees",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/authorise": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "Authorise",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeBodyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeBodyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeBodyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/access-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Obtain access token",
        "operationId": "AccessToken",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "grant_type": {
                  "style": "form"
                },
                "code": {
                  "style": "form"
                },
                "refresh_token": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/chat/sendmessage": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "send message to user",
        "operationId": "SendMessage",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendMessageDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendMessageDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1034": {
                    "summary": "Error-1034",
                    "value": {
                      "code": 1034,
                      "message": "User does not exists to send message",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/readmessage": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Read message receive",
        "operationId": "ReadMessage",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReadMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReadMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessReadMessageDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessReadMessageDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessReadMessageDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/chat/getmessages": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get messages sent from one user contact",
        "operationId": "GetMessages",
        "parameters": [
          {
            "name": "withUserId",
            "in": "query",
            "description": "user contact id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fromMessageId",
            "in": "query",
            "description": "message id which sent from user contact",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMessagesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMessagesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMessagesDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Execute payment",
        "operationId": "Payment",
        "parameters": [
          {
            "name": "x_jws_signature",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x_user_ip",
            "in": "header",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/physicalwallet/createphysicalwallet": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Create a physical wallet (can be virtual or real scheme cards, chip stickers, ScamCards etc).",
        "operationId": "CreatePhysicalWallet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1039": {
                    "summary": "Error-1039",
                    "value": {
                      "code": 1039,
                      "message": "FirstName required",
                      "statusCode": 400
                    }
                  },
                  "Error-1040": {
                    "summary": "Error-1040",
                    "value": {
                      "code": 1040,
                      "message": "LastName required",
                      "statusCode": 400
                    }
                  },
                  "Error-1041": {
                    "summary": "Error-1041",
                    "value": {
                      "code": 1041,
                      "message": "Country required",
                      "statusCode": 400
                    }
                  },
                  "Error-1046": {
                    "summary": "Error-1046",
                    "value": {
                      "code": 1046,
                      "message": "PostCode required",
                      "statusCode": 400
                    }
                  },
                  "Error-1044": {
                    "summary": "Error-1044",
                    "value": {
                      "code": 1044,
                      "message": "MobileNumber required",
                      "statusCode": 400
                    }
                  },
                  "Error-1048": {
                    "summary": "Error-1048",
                    "value": {
                      "code": 1048,
                      "message": "Address required",
                      "statusCode": 400
                    }
                  },
                  "Error-1047": {
                    "summary": "Error-1047",
                    "value": {
                      "code": 1047,
                      "message": "Email required",
                      "statusCode": 400
                    }
                  },
                  "Error-1007": {
                    "summary": "Error-1007",
                    "value": {
                      "code": 1007,
                      "message": "Invalid email",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-3002": {
                    "summary": "Error-3002",
                    "value": {
                      "code": 3002,
                      "message": "Do not have card perso which not used yet, please contact to admin.",
                      "statusCode": 500
                    }
                  },
                  "Error-7001": {
                    "summary": "Error-7001",
                    "value": {
                      "code": 7001,
                      "message": "Error call to {0} api, please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3025": {
                    "summary": "Error-3025",
                    "value": {
                      "code": 3025,
                      "message": "Physical wallet type not found",
                      "statusCode": 404
                    }
                  },
                  "Error-3022": {
                    "summary": "Error-3022",
                    "value": {
                      "code": 3022,
                      "message": "Physical wallet plan not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3026": {
                    "summary": "Error-3026",
                    "value": {
                      "code": 3026,
                      "message": "Physical wallet type and plan are not same",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwallets": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get all Physical Wallets for the user attached to the sessionToken.",
        "operationId": "GetPhysicalWallets",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/setupphysicalwallet": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Setup physicalWallet",
        "operationId": "SetupPhysicalWallet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupPhysicalWalletRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetupPhysicalWalletRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetupPhysicalWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetupPhysicalWalletResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetupPhysicalWalletResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetupPhysicalWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3028": {
                    "summary": "Error-3028",
                    "value": {
                      "code": 3028,
                      "message": "Physical wallet already actived",
                      "statusCode": 422
                    }
                  },
                  "Error-3036": {
                    "summary": "Error-3036",
                    "value": {
                      "code": 3036,
                      "message": "Physical wallet type can not access this endpoint",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/finishsetupphysicalwallet": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Finish setup physicalWallet.If this fails, the user needs to call /set-up-physicalWallet again. Upon success, this cannot be called with the same physicalWallet again.",
        "operationId": "FinishSetupPhysicalWallet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FinishSetupPhysicalWalletRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FinishSetupPhysicalWalletRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FinishSetupPhysicalWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3036": {
                    "summary": "Error-3036",
                    "value": {
                      "code": 3036,
                      "message": "Physical wallet type can not access this endpoint",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletpan": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get the PAN (or other secret 'address' for a physical wallet) \r\nfor this physical wallet.",
        "operationId": "GetPhysicalWalletPan",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPanResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPanResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPanResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-7001": {
                    "summary": "Error-7001",
                    "value": {
                      "code": 7001,
                      "message": "Error call to {0} api, please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3004": {
                    "summary": "Error-3004",
                    "value": {
                      "code": 3004,
                      "message": "Issuer card id invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletpin": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get the Physical Wallet PIN if applicable.",
        "operationId": "GetPhysicalWalletPin",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPinResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPinResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-7001": {
                    "summary": "Error-7001",
                    "value": {
                      "code": 7001,
                      "message": "Error call to {0} api, please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3004": {
                    "summary": "Error-3004",
                    "value": {
                      "code": 3004,
                      "message": "Issuer card id invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletcvc": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get the Physical Wallet CVV if applicable; this function will not \r\nwork Physical Wallets that can generate their own CVV/OTP.",
        "operationId": "GetPhysicalWalletCvc",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletCvcResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletCvcResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletCvcResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-7001": {
                    "summary": "Error-7001",
                    "value": {
                      "code": 7001,
                      "message": "Error call to {0} api, please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3004": {
                    "summary": "Error-3004",
                    "value": {
                      "code": 3004,
                      "message": "Issuer card id invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletexpiry": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get physicalWallet expiry date",
        "operationId": "GetPhysicalWalletExpiry",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletExpiryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletExpiryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletExpiryResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-7001": {
                    "summary": "Error-7001",
                    "value": {
                      "code": 7001,
                      "message": "Error call to {0} api, please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3004": {
                    "summary": "Error-3004",
                    "value": {
                      "code": 3004,
                      "message": "Issuer card id invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/setphysicalwalletstatus": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Set physicalWallet status",
        "operationId": "SetPhysicalWalletStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPhysicalWalletStatusRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPhysicalWalletStatusRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPhysicalWalletStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-7001": {
                    "summary": "Error-7001",
                    "value": {
                      "code": 7001,
                      "message": "Error call to {0} api, please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3004": {
                    "summary": "Error-3004",
                    "value": {
                      "code": 3004,
                      "message": "Issuer card id invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/destroyphysicalwallet": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Destroy physicalWallet (cannot be undone)",
        "operationId": "DestroyPhysicalWallet",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DestroyPhysicalWalletRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DestroyPhysicalWalletRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DestroyPhysicalWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-7001": {
                    "summary": "Error-7001",
                    "value": {
                      "code": 7001,
                      "message": "Error call to {0} api, please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3004": {
                    "summary": "Error-3004",
                    "value": {
                      "code": 3004,
                      "message": "Issuer card id invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletdynamicpin": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get the Physical Dynamic Wallet PIN if applicable; this function will not \r\nwork Physical Wallets that can generate their own PIN/OTP.",
        "operationId": "GetPhysicalWalletDynamicPin",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "functionNumber",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicPinResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicPinResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicPinResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletdynamicpan": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get the Physical Dynamic Wallet PAN if applicable; this function will not \r\nwork Physical Wallets that can generate their own PAN.",
        "operationId": "GetPhysicalWalletDynamicPan",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "functionNumber",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicPanResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicPanResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicPanResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletdynamiccvc": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get the Physical Dynamic Wallet CVV if applicable; this function will not \r\nwork Physical Wallets that can generate their own CVV/OTP.",
        "operationId": "GetPhysicalWalletDynamicCvc",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "functionNumber",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicCvcResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicCvcResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicCvcResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletdynamicexpiry": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Get the Physical Dynamic Wallet Expiry date if applicable; this function will not \r\nwork Physical Wallets that can generate their own Expiry/OTP.",
        "operationId": "GetPhysicalWalletDynamicExpiry",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "functionNumber",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicExpiryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicExpiryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletDynamicExpiryResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/validatephysicalwalletdynamicpin": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Validate the dynamic PIN entered into the system. \r\nTODO: is this actually interesting or valid for Users? Only the processor will do this?",
        "operationId": "ValidatePhysicalWalletDynamicPin",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicPinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicPinRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicPinRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  },
                  "Error-3033": {
                    "summary": "Error-3033",
                    "value": {
                      "code": 3033,
                      "message": "Physical wallet locked",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/validatephysicalwalletdynamicpan": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Validate a dynamic PAN  \r\nTODO: this seems useless",
        "operationId": "ValidatePhysicalWalletDynamicPan",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicPanRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicPanRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicPanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessValidatePhysicalWalletDynamicPanResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessValidatePhysicalWalletDynamicPanResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessValidatePhysicalWalletDynamicPanResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/validatephysicalwalletdynamicexpiry": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Validate the dynamic Expiry Date entered into the system. \r\nTODO: is this actually interesting or valid for Users? Only the processor will do this?",
        "operationId": "ValidatePhysicalWalletDynamicExpiry",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicExpiryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicExpiryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicExpiryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3042": {
                    "summary": "Error-3042",
                    "value": {
                      "code": 3042,
                      "message": "Physical wallet validate dynami expiry fail",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/validatephysicalwalletdynamiccvc": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Validate the dynamic CVV entered into the system. \r\nTODO: is this actually interesting or valid for Users? Only the processor will do this?",
        "operationId": "ValidatePhysicalWalletDynamicCvc",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicCvcRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicCvcRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePhysicalWalletDynamicCvcRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/setphysicalwalletpaymentmethod": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "summary": "Sets or overwrites the payment method on any physicalWallet.",
        "operationId": "SetPhysicalWalletPaymentMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPhysicalWalletPaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPhysicalWalletPaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPhysicalWalletPaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPhysicalWalletPaymentMethodResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPhysicalWalletPaymentMethodResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPhysicalWalletPaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3005": {
                    "summary": "Error-3005",
                    "value": {
                      "code": 3005,
                      "message": "Card function number invalid,{0}",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 404
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/clearphysicalwalletpaymentmethod": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "operationId": "ClearPhysicalWalletPaymentMethod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearPhysicalWalletPaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearPhysicalWalletPaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ClearPhysicalWalletPaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPhysicalWalletPaymentMethodResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPhysicalWalletPaymentMethodResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPhysicalWalletPaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3005": {
                    "summary": "Error-3005",
                    "value": {
                      "code": 3005,
                      "message": "Card function number invalid,{0}",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/configphysicalwalletpreauth": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "operationId": "ConfigPhysicalWalletPreAuth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurePreAuthRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurePreAuthRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurePreAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessConfigPhysicalWalletPreAuthResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessConfigPhysicalWalletPreAuthResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessConfigPhysicalWalletPreAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3005": {
                    "summary": "Error-3005",
                    "value": {
                      "code": 3005,
                      "message": "Card function number invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-3006": {
                    "summary": "Error-3006",
                    "value": {
                      "code": 3006,
                      "message": "Card preauth duration invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-3007": {
                    "summary": "Error-3007",
                    "value": {
                      "code": 3007,
                      "message": "Card preauth maximum amount invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwalletpreauth": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "operationId": "GetPhysicalWalletPreAuth",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "functionNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPreAuthResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPreAuthResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletPreAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3010": {
                    "summary": "Error-3010",
                    "value": {
                      "code": 3010,
                      "message": "Card pre auth not exists",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/cancelpreauthphysicalwallet": {
      "post": {
        "tags": [
          "PhysicalWallet"
        ],
        "operationId": "CancelPreAuthPhysicalWallet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPreAuthPhysicalWalletRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPreAuthPhysicalWalletRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPreAuthPhysicalWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3010": {
                    "summary": "Error-3010",
                    "value": {
                      "code": 3010,
                      "message": "Card pre auth not exists",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/physicalwallet/getphysicalwallettiers": {
      "get": {
        "tags": [
          "PhysicalWallet"
        ],
        "operationId": "GetPhysicalWalletTiers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletTiersResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletTiersResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPhysicalWalletTiersResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/secret/excutepayment": {
      "post": {
        "tags": [
          "Secret"
        ],
        "operationId": "ExcutePayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExcutePaymentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExcutePaymentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExcutePaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessExecutePaymentPhysicalWalletResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessExecutePaymentPhysicalWalletResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessExecutePaymentPhysicalWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3005": {
                    "summary": "Error-3005",
                    "value": {
                      "code": 3005,
                      "message": "Card function number invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2021": {
                    "summary": "Error-2021",
                    "value": {
                      "code": 2021,
                      "message": "Cannot exchange payment if amount less minimal amount limit {0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2022": {
                    "summary": "Error-2022",
                    "value": {
                      "code": 2022,
                      "message": "Cannot transfer payment if amount less minimal amount limit {0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2007": {
                    "summary": "Error-2007",
                    "value": {
                      "code": 2007,
                      "message": "Insufficient funds",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3008": {
                    "summary": "Error-3008",
                    "value": {
                      "code": 3008,
                      "message": "Card funding payment method not exists",
                      "statusCode": 404
                    }
                  },
                  "Error-3009": {
                    "summary": "Error-3009",
                    "value": {
                      "code": 3009,
                      "message": "Card funding payment method not belong current user",
                      "statusCode": 404
                    }
                  },
                  "Error-2004": {
                    "summary": "Error-2004",
                    "value": {
                      "code": 2004,
                      "message": "Currency not supported for prepaid account",
                      "statusCode": 404
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3011": {
                    "summary": "Error-3011",
                    "value": {
                      "code": 3011,
                      "message": "Card not belong current user",
                      "statusCode": 422
                    }
                  },
                  "Error-3012": {
                    "summary": "Error-3012",
                    "value": {
                      "code": 3012,
                      "message": "Card can not used,the card is {0}",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/secret/notifyphysicalwalletalmostexpiredpreauths": {
      "get": {
        "tags": [
          "Secret"
        ],
        "operationId": "NotifyPhysicalWalletAlmostExpiredPreAuths",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/secret/cancelphysicalwalletexpiredpreauths": {
      "get": {
        "tags": [
          "Secret"
        ],
        "operationId": "CancelPhysicalWalletExpiredPreAuths",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/sticker/reserveperso": {
      "post": {
        "tags": [
          "Sticker"
        ],
        "summary": "Generate sticker perso",
        "operationId": "ReservePerso",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservePersoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservePersoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReservePersoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessReservePersoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessReservePersoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessReservePersoDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sticker/getperso": {
      "get": {
        "tags": [
          "Sticker"
        ],
        "summary": "Get perso serial",
        "operationId": "GetPerso",
        "parameters": [
          {
            "name": "serial",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPersoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPersoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPersoDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sticker/getkeys": {
      "get": {
        "tags": [
          "Sticker"
        ],
        "summary": "Get private and public keys with serial corresponding",
        "operationId": "GetKeys",
        "parameters": [
          {
            "name": "serial",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetKeysDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetKeysDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetKeysDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sticker/activate": {
      "post": {
        "tags": [
          "Sticker"
        ],
        "summary": "Activate sticker",
        "operationId": "Activate",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessActivateDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessActivateDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessActivateDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2523": {
                    "summary": "Error-2523",
                    "value": {
                      "code": 2523,
                      "message": "Sticker serial invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2524": {
                    "summary": "Error-2524",
                    "value": {
                      "code": 2524,
                      "message": "Sticker serial length invalid, the length of sticker serial should be greater than or equal 9",
                      "statusCode": 400
                    }
                  },
                  "Error-2527": {
                    "summary": "Error-2527",
                    "value": {
                      "code": 2527,
                      "message": "Sticker serial not found",
                      "statusCode": 400
                    }
                  },
                  "Error-2525": {
                    "summary": "Error-2525",
                    "value": {
                      "code": 2525,
                      "message": "Sticker serial already activated",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-2530": {
                    "summary": "Error-2530",
                    "value": {
                      "code": 2530,
                      "message": "Invalid sig. System error, please contact the administrator",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sticker/undosigned": {
      "post": {
        "tags": [
          "Sticker"
        ],
        "summary": "Undo Signed",
        "operationId": "UndoSigned",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndoSignedRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UndoSignedRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UndoSignedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUndoSignedDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUndoSignedDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUndoSignedDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2523": {
                    "summary": "Error-2523",
                    "value": {
                      "code": 2523,
                      "message": "Sticker serial invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2524": {
                    "summary": "Error-2524",
                    "value": {
                      "code": 2524,
                      "message": "Sticker serial length invalid, the length of sticker serial should be greater than or equal 9",
                      "statusCode": 400
                    }
                  },
                  "Error-2527": {
                    "summary": "Error-2527",
                    "value": {
                      "code": 2527,
                      "message": "Sticker serial not found",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sticker/signed": {
      "post": {
        "tags": [
          "Sticker"
        ],
        "summary": "Signed",
        "operationId": "Signed",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignedRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SignedRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SignedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSignedDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSignedDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSignedDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2523": {
                    "summary": "Error-2523",
                    "value": {
                      "code": 2523,
                      "message": "Sticker serial invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2524": {
                    "summary": "Error-2524",
                    "value": {
                      "code": 2524,
                      "message": "Sticker serial length invalid, the length of sticker serial should be greater than or equal 9",
                      "statusCode": 400
                    }
                  },
                  "Error-2527": {
                    "summary": "Error-2527",
                    "value": {
                      "code": 2527,
                      "message": "Sticker serial not found",
                      "statusCode": 400
                    }
                  },
                  "Error-2525": {
                    "summary": "Error-2525",
                    "value": {
                      "code": 2525,
                      "message": "Sticker serial already activated",
                      "statusCode": 400
                    }
                  },
                  "Error-2528": {
                    "summary": "Error-2528",
                    "value": {
                      "code": 2528,
                      "message": "Verified sig invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2529": {
                    "summary": "Error-2529",
                    "value": {
                      "code": 2529,
                      "message": "Verify sig error. system error, please contact the administrator",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sticker/updateactivatedsticker": {
      "post": {
        "tags": [
          "Sticker"
        ],
        "summary": "Update sticker perso with MacAddress,Signature,SignedPackage",
        "operationId": "UpdateActivatedSticker",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivatedStickerRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivatedStickerRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivatedStickerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUpdateActivatedStickerDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUpdateActivatedStickerDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUpdateActivatedStickerDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2523": {
                    "summary": "Error-2523",
                    "value": {
                      "code": 2523,
                      "message": "Sticker serial invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2524": {
                    "summary": "Error-2524",
                    "value": {
                      "code": 2524,
                      "message": "Sticker serial length invalid, the length of sticker serial should be greater than or equal 9",
                      "statusCode": 400
                    }
                  },
                  "Error-2527": {
                    "summary": "Error-2527",
                    "value": {
                      "code": 2527,
                      "message": "Sticker serial not found",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2526": {
                    "summary": "Error-2526",
                    "value": {
                      "code": 2526,
                      "message": "Sticker serial not belong current user",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sticker/getactivatedsticker": {
      "get": {
        "tags": [
          "Sticker"
        ],
        "summary": "Get activate sticker",
        "operationId": "GetActivatedSticker",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetActivatedStickerDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetActivatedStickerDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetActivatedStickerDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2527": {
                    "summary": "Error-2527",
                    "value": {
                      "code": 2527,
                      "message": "Sticker serial not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/loginbyadmin": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "LoginByAdmin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUserSanatizeDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUserSanatizeDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUserSanatizeDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1042": {
                    "summary": "Error-1042",
                    "value": {
                      "code": 1042,
                      "message": "Login info required",
                      "statusCode": 400
                    }
                  },
                  "Error-1043": {
                    "summary": "Error-1043",
                    "value": {
                      "code": 1043,
                      "message": "Password required",
                      "statusCode": 400
                    }
                  },
                  "Error-1350": {
                    "summary": "Error-1350",
                    "value": {
                      "code": 1350,
                      "message": "Invalid Login Combination",
                      "statusCode": 400
                    }
                  },
                  "Error-1301": {
                    "summary": "Error-1301",
                    "value": {
                      "code": 1301,
                      "message": "User not belong this application",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deleteuserbyadmin": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "use to delete user by login (mobileNumber or email)",
        "operationId": "DeleteUserByAdmin",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserByAdminRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserByAdminRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserByAdminRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAdminDeleteUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAdminDeleteUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAdminDeleteUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getallusers": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all users",
        "operationId": "GetAllUsers",
        "parameters": [
          {
            "name": "mobileNumber",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "middleName",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetAllUsersDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetAllUsersDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetAllUsersDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getuserprofilebyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GetUserProfileByAdmin",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserProfileByAdminDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserProfileByAdminDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserProfileByAdminDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getsmsotp": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get sms otp",
        "operationId": "GetSMSOtp",
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSMSOtpDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSMSOtpDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSMSOtpDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getemailotp": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get email otp",
        "operationId": "GetEmailOtp",
        "parameters": [
          {
            "name": "login",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetEmailOtpDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetEmailOtpDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetEmailOtpDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/saveuser": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "SaveUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSaveUserResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSaveUserResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSaveUserResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1039": {
                    "summary": "Error-1039",
                    "value": {
                      "code": 1039,
                      "message": "FirstName required",
                      "statusCode": 400
                    }
                  },
                  "Error-1043": {
                    "summary": "Error-1043",
                    "value": {
                      "code": 1043,
                      "message": "Password required",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1072": {
                    "summary": "Error-1072",
                    "value": {
                      "code": 1072,
                      "message": "Country phone code invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2046": {
                    "summary": "Error-2046",
                    "value": {
                      "code": 2046,
                      "message": "Region not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletewallets": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "use to delete wallets by login (mobileNumber or email)",
        "operationId": "DeleteWallets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWalletsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWalletsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWalletsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteWalletsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteWalletsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteWalletsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/setbalance": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Set balance for payment method Id",
        "operationId": "SetBalance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetBalanceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetBalanceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetBalanceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetBalanceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetBalanceDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/refreshexchangerates": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "refresh exchange rate",
        "operationId": "RefreshExchangeRates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRefreshExchangeRatesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRefreshExchangeRatesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRefreshExchangeRatesDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getavailablecurrenciesbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get currencies by paging",
        "operationId": "GetAvailableCurrenciesByAdmin",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListCurrencyDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListCurrencyDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListCurrencyDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createcurrency": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "create currency",
        "operationId": "CreateCurrency",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCurrencyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCurrencyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCurrencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateCurrencyResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateCurrencyResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateCurrencyResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2035": {
                    "summary": "Error-2035",
                    "value": {
                      "code": 2035,
                      "message": "Currency name required",
                      "statusCode": 400
                    }
                  },
                  "Error-2040": {
                    "summary": "Error-2040",
                    "value": {
                      "code": 2040,
                      "message": "Can not do with this currency,now test with only CUR currency",
                      "statusCode": 400
                    }
                  },
                  "Error-2036": {
                    "summary": "Error-2036",
                    "value": {
                      "code": 2036,
                      "message": "Currency symbol required",
                      "statusCode": 400
                    }
                  },
                  "Error-2037": {
                    "summary": "Error-2037",
                    "value": {
                      "code": 2037,
                      "message": "Currency Precision invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2038": {
                    "summary": "Error-2038",
                    "value": {
                      "code": 2038,
                      "message": "Currency format invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2039": {
                    "summary": "Error-2039",
                    "value": {
                      "code": 2039,
                      "message": "Currency name already exists",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatecurrency": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "UpdateCurrency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCurrencyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCurrencyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCurrencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2040": {
                    "summary": "Error-2040",
                    "value": {
                      "code": 2040,
                      "message": "Can not do with this currency,now test with only CUR currency",
                      "statusCode": 400
                    }
                  },
                  "Error-2036": {
                    "summary": "Error-2036",
                    "value": {
                      "code": 2036,
                      "message": "Currency symbol required",
                      "statusCode": 400
                    }
                  },
                  "Error-2037": {
                    "summary": "Error-2037",
                    "value": {
                      "code": 2037,
                      "message": "Currency Precision invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2038": {
                    "summary": "Error-2038",
                    "value": {
                      "code": 2038,
                      "message": "Currency format invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getcurrencybyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get currency by id",
        "operationId": "GetCurrencyById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "currency id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletecurrency": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete currency",
        "operationId": "DeleteCurrency",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/undeletecurrency": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "UnDelete currency",
        "operationId": "UnDeleteCurrency",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeleteCurrencyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeleteCurrencyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeleteCurrencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createfeedefinition": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "create FeeDefinition",
        "operationId": "CreateFeeDefinition",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeeDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeeDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeeDefinitionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateFeeDefinitionResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateFeeDefinitionResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateFeeDefinitionResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2062": {
                    "summary": "Error-2062",
                    "value": {
                      "code": 2062,
                      "message": "Payment type invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2061": {
                    "summary": "Error-2061",
                    "value": {
                      "code": 2061,
                      "message": "Transaction type invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2060": {
                    "summary": "Error-2060",
                    "value": {
                      "code": 2060,
                      "message": "Payment method type invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2065": {
                    "summary": "Error-2065",
                    "value": {
                      "code": 2065,
                      "message": "Fee value description Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2066": {
                    "summary": "Error-2066",
                    "value": {
                      "code": 2066,
                      "message": "Fee amount Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2067": {
                    "summary": "Error-2067",
                    "value": {
                      "code": 2067,
                      "message": "Fee value  type Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2068": {
                    "summary": "Error-2068",
                    "value": {
                      "code": 2068,
                      "message": "Fee value unit Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2069": {
                    "summary": "Error-2069",
                    "value": {
                      "code": 2069,
                      "message": "FeeValue paidby Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-1012": {
                    "summary": "Error-1012",
                    "value": {
                      "code": 1012,
                      "message": "Invalid Country",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  },
                  "Error-2073": {
                    "summary": "Error-2073",
                    "value": {
                      "code": 2073,
                      "message": "FeeDefinitionValue currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2064": {
                    "summary": "Error-2064",
                    "value": {
                      "code": 2064,
                      "message": "Fee definition already exists",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatefeedefinition": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "update FeeDefinition",
        "operationId": "UpdateFeeDefinition",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeeDefinitionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeeDefinitionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeeDefinitionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFeeDefinitionDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFeeDefinitionDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFeeDefinitionDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2062": {
                    "summary": "Error-2062",
                    "value": {
                      "code": 2062,
                      "message": "Payment type invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2061": {
                    "summary": "Error-2061",
                    "value": {
                      "code": 2061,
                      "message": "Transaction type invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2060": {
                    "summary": "Error-2060",
                    "value": {
                      "code": 2060,
                      "message": "Payment method type invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2065": {
                    "summary": "Error-2065",
                    "value": {
                      "code": 2065,
                      "message": "Fee value description Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2066": {
                    "summary": "Error-2066",
                    "value": {
                      "code": 2066,
                      "message": "Fee amount Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2067": {
                    "summary": "Error-2067",
                    "value": {
                      "code": 2067,
                      "message": "Fee value  type Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2068": {
                    "summary": "Error-2068",
                    "value": {
                      "code": 2068,
                      "message": "Fee value unit Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2069": {
                    "summary": "Error-2069",
                    "value": {
                      "code": 2069,
                      "message": "FeeValue paidby Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-1012": {
                    "summary": "Error-1012",
                    "value": {
                      "code": 1012,
                      "message": "Invalid Country",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  },
                  "Error-2063": {
                    "summary": "Error-2063",
                    "value": {
                      "code": 2063,
                      "message": "Fee definition not found",
                      "statusCode": 404
                    }
                  },
                  "Error-2073": {
                    "summary": "Error-2073",
                    "value": {
                      "code": 2073,
                      "message": "FeeDefinitionValue currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2064": {
                    "summary": "Error-2064",
                    "value": {
                      "code": 2064,
                      "message": "Fee definition already exists",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getfeedefinitionbyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GetFeeDefinitionById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFeeDefinitionDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFeeDefinitionDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFeeDefinitionDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2063": {
                    "summary": "Error-2063",
                    "value": {
                      "code": 2063,
                      "message": "Fee definition not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getfeedefinitions": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GetFeeDefinitions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "fromCurencyId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "toCurrencyId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fromPaymentMethodType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaymentMethodTypeValues"
            }
          },
          {
            "name": "toPaymentMethodType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaymentMethodTypeValues"
            }
          },
          {
            "name": "transactionType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/TransactionTypeValues"
            }
          },
          {
            "name": "paymentType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaymentTypeValues"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListFeeDefinitionDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListFeeDefinitionDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListFeeDefinitionDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletefeedefinition": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "DeleteFeeDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2063": {
                    "summary": "Error-2063",
                    "value": {
                      "code": 2063,
                      "message": "Fee definition not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatekycstatus": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "update Kyc status",
        "operationId": "UpdateKycStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKycStatusRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKycStatusRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKycStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessKycDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessKycDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessKycDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1061": {
                    "summary": "Error-1061",
                    "value": {
                      "code": 1061,
                      "message": "Kyc level invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-1060": {
                    "summary": "Error-1060",
                    "value": {
                      "code": 1060,
                      "message": "Kyc not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getkycbyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get kyc by id",
        "operationId": "GetKycById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepKycDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepKycDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepKycDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-1060": {
                    "summary": "Error-1060",
                    "value": {
                      "code": 1060,
                      "message": "Kyc not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getkycs": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "",
        "operationId": "GetKycs",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "kycId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "kyc level",
            "schema": {
              "$ref": "#/components/schemas/KycLevelValues"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "kyc document type",
            "schema": {
              "$ref": "#/components/schemas/KycDocumentTypeValues"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "kyc status",
            "schema": {
              "$ref": "#/components/schemas/KycStatusValues"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepKycDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepKycDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepKycDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createpaymentmethodbyadmin": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "create PaymentMethod",
        "operationId": "CreatePaymentMethodByAdmin",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePaymentMethodResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePaymentMethodResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePaymentMethodResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2050": {
                    "summary": "Error-2050",
                    "value": {
                      "code": 2050,
                      "message": "PaymentMethod name Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2051": {
                    "summary": "Error-2051",
                    "value": {
                      "code": 2051,
                      "message": "PaymentMethod minimaltransferoutamount Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2052": {
                    "summary": "Error-2052",
                    "value": {
                      "code": 2052,
                      "message": "PaymentMethod minimalexchangeamount Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2053": {
                    "summary": "Error-2053",
                    "value": {
                      "code": 2053,
                      "message": "PaymentMethod subcurrency value Invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2055": {
                    "summary": "Error-2055",
                    "value": {
                      "code": 2055,
                      "message": "Regions not found with ids: ",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2056": {
                    "summary": "Error-2056",
                    "value": {
                      "code": 2056,
                      "message": "PaymentMethod name already exists ",
                      "statusCode": 422
                    }
                  },
                  "Error-2054": {
                    "summary": "Error-2054",
                    "value": {
                      "code": 2054,
                      "message": "PaymentMethod not support this currency",
                      "statusCode": 422
                    }
                  },
                  "Error-2057": {
                    "summary": "Error-2057",
                    "value": {
                      "code": 2057,
                      "message": "PaymentMethod type {0} with this currency {1} already exists",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatepaymentmethodbyadmin": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "update PaymentMethod",
        "operationId": "UpdatePaymentMethodByAdmin",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPaymentMethodDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPaymentMethodDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPaymentMethodDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2050": {
                    "summary": "Error-2050",
                    "value": {
                      "code": 2050,
                      "message": "PaymentMethod name Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2051": {
                    "summary": "Error-2051",
                    "value": {
                      "code": 2051,
                      "message": "PaymentMethod minimaltransferoutamount Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2052": {
                    "summary": "Error-2052",
                    "value": {
                      "code": 2052,
                      "message": "PaymentMethod minimalexchangeamount Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2053": {
                    "summary": "Error-2053",
                    "value": {
                      "code": 2053,
                      "message": "PaymentMethod subcurrency value Invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2055": {
                    "summary": "Error-2055",
                    "value": {
                      "code": 2055,
                      "message": "Regions not found with ids: ",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2056": {
                    "summary": "Error-2056",
                    "value": {
                      "code": 2056,
                      "message": "PaymentMethod name already exists ",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getpaymentmethodinstancesbyuserid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get dashboard",
        "operationId": "GetPaymentMethodInstancesByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "wallet",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Main"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetDashboardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetDashboardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetDashboardDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getpaymentmethodbyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "get payment method by id",
        "operationId": "GetPaymentMethodById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "payment method id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPaymentMethodDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPaymentMethodDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPaymentMethodDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getpaymentmethodsbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get payment methods by paging",
        "operationId": "GetPaymentMethodsByAdmin",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPaymentMethodDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPaymentMethodDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPaymentMethodDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletepaymentmethodbyadmin": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "DeletePaymentMethodByAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/undeletepaymentmethod": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "UnDelete Region",
        "operationId": "UnDeletePaymentMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeletePaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeletePaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeletePaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2044": {
                    "summary": "Error-2044",
                    "value": {
                      "code": 2044,
                      "message": "Region name Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2045": {
                    "summary": "Error-2045",
                    "value": {
                      "code": 2045,
                      "message": "Region isoname Required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2046": {
                    "summary": "Error-2046",
                    "value": {
                      "code": 2046,
                      "message": "Region not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/gettreasuryamount": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get treasury amount (payment method instance balance amount for currencies)",
        "operationId": "GetTreasuryAmount",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetPaymentMethodInstanceBalanceAmountsDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetPaymentMethodInstanceBalanceAmountsDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetPaymentMethodInstanceBalanceAmountsDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/generatepersobatch": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "generate perso batch",
        "operationId": "GeneratePersoBatch",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePersoBatchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePersoBatchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePersoBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3001": {
                    "summary": "Error-3001",
                    "value": {
                      "code": 3001,
                      "message": "Number of generated card is invalid.",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-3000": {
                    "summary": "Error-3000",
                    "value": {
                      "code": 3000,
                      "message": "Number of card digits is invalid,please contact to admin.",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwalletperso": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GetPhysicalWalletPerso",
        "parameters": [
          {
            "name": "physicalWalletId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPhysicalWalletPersoDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPhysicalWalletPersoDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPhysicalWalletPersoDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3003": {
                    "summary": "Error-3003",
                    "value": {
                      "code": 3003,
                      "message": "Card not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createwallettype": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "create wallet type for physcial wallet",
        "operationId": "CreateWalletType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletTypeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletTypeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWalletTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateWalletTypeResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateWalletTypeResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateWalletTypeResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3013": {
                    "summary": "Error-3013",
                    "value": {
                      "code": 3013,
                      "message": "Wallet type name required",
                      "statusCode": 400
                    }
                  },
                  "Error-3014": {
                    "summary": "Error-3014",
                    "value": {
                      "code": 3014,
                      "message": "Wallet type name already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatewallettype": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Update wallet type",
        "operationId": "UpdateWalletType",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletTypeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletTypeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWalletTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessWalletTypeDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessWalletTypeDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessWalletTypeDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3015": {
                    "summary": "Error-3015",
                    "value": {
                      "code": 3015,
                      "message": "Wallet type not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getwallettypebyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get wallet type by id",
        "operationId": "GetWalletTypeById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "wallet type id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessWalletTypeDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessWalletTypeDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessWalletTypeDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3015": {
                    "summary": "Error-3015",
                    "value": {
                      "code": 3015,
                      "message": "Wallet type not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletewallettype": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete wallet type",
        "operationId": "DeleteWalletType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "wallet type id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3015": {
                    "summary": "Error-3015",
                    "value": {
                      "code": 3015,
                      "message": "Wallet type not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getwallettypesbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all wallet types",
        "operationId": "GetWalletTypesByAdmin",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListWalletTypeDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListWalletTypeDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListWalletTypeDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createphysicalwallettier": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Create physical wallet tier",
        "operationId": "CreatePhysicalWalletTier",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletTierRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletTierRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletTierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletTierResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletTierResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletTierResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3047": {
                    "summary": "Error-3047",
                    "value": {
                      "code": 3047,
                      "message": "Physical wallet tier ordering invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-3016": {
                    "summary": "Error-3016",
                    "value": {
                      "code": 3016,
                      "message": "Physical wallet tier name required",
                      "statusCode": 400
                    }
                  },
                  "Error-3017": {
                    "summary": "Error-3017",
                    "value": {
                      "code": 3017,
                      "message": "Physical wallet tier name already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatephysicalwallettier": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Update physical wallet tier",
        "operationId": "UpdatePhysicalWalletTier",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhysicalWalletTierRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhysicalWalletTierRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhysicalWalletTierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTierDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTierDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTierDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3047": {
                    "summary": "Error-3047",
                    "value": {
                      "code": 3047,
                      "message": "Physical wallet tier ordering invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3018": {
                    "summary": "Error-3018",
                    "value": {
                      "code": 3018,
                      "message": "Physical wallet tier not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwallettiersbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all physical wallet tiers",
        "operationId": "GetPhysicalWalletTiersByAdmin",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletTierDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletTierDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletTierDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwallettierbyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get physical wallet tier by id",
        "operationId": "GetPhysicalWalletTierById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "physical wallet tier id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTierDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTierDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTierDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3018": {
                    "summary": "Error-3018",
                    "value": {
                      "code": 3018,
                      "message": "Physical wallet tier not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletephysicalwallettier": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete physical wallet tier",
        "operationId": "DeletePhysicalWalletTier",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "physical wallet tier id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3018": {
                    "summary": "Error-3018",
                    "value": {
                      "code": 3018,
                      "message": "Physical wallet tier not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createphysicalwalletplan": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Create physical wallet plan",
        "operationId": "CreatePhysicalWalletPlan",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletPlanRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletPlanRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhysicalWalletPlanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletPlanResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletPlanResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletPlanResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3019": {
                    "summary": "Error-3019",
                    "value": {
                      "code": 3019,
                      "message": "Physical wallet plan name required",
                      "statusCode": 400
                    }
                  },
                  "Error-3021": {
                    "summary": "Error-3021",
                    "value": {
                      "code": 3021,
                      "message": "Physical wallet plan price invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-3020": {
                    "summary": "Error-3020",
                    "value": {
                      "code": 3020,
                      "message": "Physical wallet plan name already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  },
                  "Error-3018": {
                    "summary": "Error-3018",
                    "value": {
                      "code": 3018,
                      "message": "Physical wallet tier not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatephysicalwalletplan": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Update physical wallet plan",
        "operationId": "UpdatePhysicalWalletPlan",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhysicalWalletPlanRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhysicalWalletPlanRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhysicalWalletPlanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletPlanDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletPlanDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletPlanDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3021": {
                    "summary": "Error-3021",
                    "value": {
                      "code": 3021,
                      "message": "Physical wallet plan price invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwalletplansbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all physical wallet plan",
        "operationId": "GetPhysicalWalletPlansByAdmin",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletPlanDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletPlanDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletPlanDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwalletplanbyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get physical wallet pland by id",
        "operationId": "GetPhysicalWalletPlanById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletPlanDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletPlanDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletPlanDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3022": {
                    "summary": "Error-3022",
                    "value": {
                      "code": 3022,
                      "message": "Physical wallet plan not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletephysicalwalletplan": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete physical wallet plan",
        "operationId": "DeletePhysicalWalletPlan",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3022": {
                    "summary": "Error-3022",
                    "value": {
                      "code": 3022,
                      "message": "Physical wallet plan not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createphysicalwallettype": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Create physical wallet type",
        "operationId": "CreatePhysicalWalletType",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string"
                  },
                  "Description": {
                    "type": "string"
                  },
                  "Image": {
                    "type": "string",
                    "format": "binary"
                  },
                  "WalletTypeId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "Scheme": {
                    "$ref": "#/components/schemas/PhysicalWalletSchemeValues"
                  },
                  "HasKeyboard": {
                    "type": "boolean"
                  },
                  "HasCvvDisplay": {
                    "type": "boolean"
                  },
                  "HasPinDisplay": {
                    "type": "boolean"
                  },
                  "HasPanDisplay": {
                    "type": "boolean"
                  },
                  "HasDynamicCvv": {
                    "type": "boolean"
                  },
                  "HasDynamicPan": {
                    "type": "boolean"
                  },
                  "HasDynamicPin": {
                    "type": "boolean"
                  },
                  "PhysicalAuth": {
                    "type": "boolean"
                  },
                  "Material": {
                    "type": "string"
                  },
                  "Color": {
                    "type": "string"
                  },
                  "AppColor": {
                    "type": "string"
                  },
                  "Finish": {
                    "type": "string"
                  },
                  "Cost": {
                    "type": "number",
                    "format": "double"
                  },
                  "CostCurrencyId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "IssuerName": {
                    "type": "string"
                  },
                  "PhysicalWalletTierId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "PreAuthAllEnabled": {
                    "type": "boolean",
                    "description": "Is pre-auth enabled for all methods?"
                  },
                  "PreAuthMultiUseAllAllowed": {
                    "type": "boolean",
                    "description": "Is pre-auth multi-use allowed for all methods?"
                  },
                  "PreAuthAllMandatory": {
                    "type": "boolean",
                    "description": "Is the user allowed to disable Preauth on all methods"
                  },
                  "PreAuthMagstripeEnabled": {
                    "type": "boolean",
                    "description": "Is PreAuth on magstripe enabled"
                  },
                  "PreAuthMagstripeMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  },
                  "PreAuthMagstripeMandatory": {
                    "type": "boolean",
                    "description": "Is PreAuth on magstripe mandatory (user can disable?)"
                  },
                  "PreAuthContactlessEnabled": {
                    "type": "boolean",
                    "description": "Is PreAuth on contactless enabled"
                  },
                  "PreAuthContactlessMandatory": {
                    "type": "boolean",
                    "description": "Is PreAuth on contactless mandatory (user can disable?)"
                  },
                  "PreAuthContactlessMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  },
                  "PreAuthChipAndSigEnabled": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndSigMandatory": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndSigMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  },
                  "PreAuthChipAndPinEnabled": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndPinMandatory": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndPinMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Image": {
                  "style": "form"
                },
                "WalletTypeId": {
                  "style": "form"
                },
                "Scheme": {
                  "style": "form"
                },
                "HasKeyboard": {
                  "style": "form"
                },
                "HasCvvDisplay": {
                  "style": "form"
                },
                "HasPinDisplay": {
                  "style": "form"
                },
                "HasPanDisplay": {
                  "style": "form"
                },
                "HasDynamicCvv": {
                  "style": "form"
                },
                "HasDynamicPan": {
                  "style": "form"
                },
                "HasDynamicPin": {
                  "style": "form"
                },
                "PhysicalAuth": {
                  "style": "form"
                },
                "Material": {
                  "style": "form"
                },
                "Color": {
                  "style": "form"
                },
                "AppColor": {
                  "style": "form"
                },
                "Finish": {
                  "style": "form"
                },
                "Cost": {
                  "style": "form"
                },
                "CostCurrencyId": {
                  "style": "form"
                },
                "IssuerName": {
                  "style": "form"
                },
                "PhysicalWalletTierId": {
                  "style": "form"
                },
                "PreAuthAllEnabled": {
                  "style": "form"
                },
                "PreAuthMultiUseAllAllowed": {
                  "style": "form"
                },
                "PreAuthAllMandatory": {
                  "style": "form"
                },
                "PreAuthMagstripeEnabled": {
                  "style": "form"
                },
                "PreAuthMagstripeMinAmount": {
                  "style": "form"
                },
                "PreAuthMagstripeMandatory": {
                  "style": "form"
                },
                "PreAuthContactlessEnabled": {
                  "style": "form"
                },
                "PreAuthContactlessMandatory": {
                  "style": "form"
                },
                "PreAuthContactlessMinAmount": {
                  "style": "form"
                },
                "PreAuthChipAndSigEnabled": {
                  "style": "form"
                },
                "PreAuthChipAndSigMandatory": {
                  "style": "form"
                },
                "PreAuthChipAndSigMinAmount": {
                  "style": "form"
                },
                "PreAuthChipAndPinEnabled": {
                  "style": "form"
                },
                "PreAuthChipAndPinMandatory": {
                  "style": "form"
                },
                "PreAuthChipAndPinMinAmount": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletTypeResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletTypeResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreatePhysicalWalletTypeResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3023": {
                    "summary": "Error-3023",
                    "value": {
                      "code": 3023,
                      "message": "Physical wallet type name required",
                      "statusCode": 400
                    }
                  },
                  "Error-3044": {
                    "summary": "Error-3044",
                    "value": {
                      "code": 3044,
                      "message": "Physical wallet type cost invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-3045": {
                    "summary": "Error-3045",
                    "value": {
                      "code": 3045,
                      "message": "Physical wallet scheme invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-3046": {
                    "summary": "Error-3046",
                    "value": {
                      "code": 3046,
                      "message": "Physical wallet issuer invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  },
                  "Error-3015": {
                    "summary": "Error-3015",
                    "value": {
                      "code": 3015,
                      "message": "Wallet type not found",
                      "statusCode": 404
                    }
                  },
                  "Error-3018": {
                    "summary": "Error-3018",
                    "value": {
                      "code": 3018,
                      "message": "Physical wallet tier not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-3024": {
                    "summary": "Error-3024",
                    "value": {
                      "code": 3024,
                      "message": "Physical wallet type name already exists",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatephysicalwallettype": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Update physical wallet type",
        "operationId": "UpdatePhysicalWalletType",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "Description": {
                    "type": "string"
                  },
                  "Material": {
                    "type": "string"
                  },
                  "Color": {
                    "type": "string"
                  },
                  "AppColor": {
                    "type": "string"
                  },
                  "Finish": {
                    "type": "string"
                  },
                  "Cost": {
                    "type": "number",
                    "format": "double"
                  },
                  "Image": {
                    "type": "string",
                    "format": "binary"
                  },
                  "IsDeletedImage": {
                    "type": "boolean"
                  },
                  "PreAuthAllEnabled": {
                    "type": "boolean",
                    "description": "Is pre-auth enabled for all methods?"
                  },
                  "PreAuthMultiUseAllAllowed": {
                    "type": "boolean",
                    "description": "Is pre-auth multi-use allowed for all methods?"
                  },
                  "PreAuthAllMandatory": {
                    "type": "boolean",
                    "description": "Is the user allowed to disable Preauth on all methods"
                  },
                  "PreAuthMagstripeEnabled": {
                    "type": "boolean",
                    "description": "Is PreAuth on magstripe enabled"
                  },
                  "PreAuthMagstripeMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  },
                  "PreAuthMagstripeMandatory": {
                    "type": "boolean",
                    "description": "Is PreAuth on magstripe mandatory (user can disable?)"
                  },
                  "PreAuthContactlessEnabled": {
                    "type": "boolean",
                    "description": "Is PreAuth on contactless enabled"
                  },
                  "PreAuthContactlessMandatory": {
                    "type": "boolean",
                    "description": "Is PreAuth on contactless mandatory (user can disable?)"
                  },
                  "PreAuthContactlessMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  },
                  "PreAuthChipAndSigEnabled": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndSigMandatory": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndSigMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  },
                  "PreAuthChipAndPinEnabled": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndPinMandatory": {
                    "type": "boolean"
                  },
                  "PreAuthChipAndPinMinAmount": {
                    "type": "number",
                    "description": "From what amount is PreAuth mandatory (even if the user can disable lower amounts)",
                    "format": "double"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Material": {
                  "style": "form"
                },
                "Color": {
                  "style": "form"
                },
                "AppColor": {
                  "style": "form"
                },
                "Finish": {
                  "style": "form"
                },
                "Cost": {
                  "style": "form"
                },
                "Image": {
                  "style": "form"
                },
                "IsDeletedImage": {
                  "style": "form"
                },
                "PreAuthAllEnabled": {
                  "style": "form"
                },
                "PreAuthMultiUseAllAllowed": {
                  "style": "form"
                },
                "PreAuthAllMandatory": {
                  "style": "form"
                },
                "PreAuthMagstripeEnabled": {
                  "style": "form"
                },
                "PreAuthMagstripeMinAmount": {
                  "style": "form"
                },
                "PreAuthMagstripeMandatory": {
                  "style": "form"
                },
                "PreAuthContactlessEnabled": {
                  "style": "form"
                },
                "PreAuthContactlessMandatory": {
                  "style": "form"
                },
                "PreAuthContactlessMinAmount": {
                  "style": "form"
                },
                "PreAuthChipAndSigEnabled": {
                  "style": "form"
                },
                "PreAuthChipAndSigMandatory": {
                  "style": "form"
                },
                "PreAuthChipAndSigMinAmount": {
                  "style": "form"
                },
                "PreAuthChipAndPinEnabled": {
                  "style": "form"
                },
                "PreAuthChipAndPinMandatory": {
                  "style": "form"
                },
                "PreAuthChipAndPinMinAmount": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTypeDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTypeDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTypeDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-3044": {
                    "summary": "Error-3044",
                    "value": {
                      "code": 3044,
                      "message": "Physical wallet type cost invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3015": {
                    "summary": "Error-3015",
                    "value": {
                      "code": 3015,
                      "message": "Wallet type not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwallettypesbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all physical wallet types",
        "operationId": "GetPhysicalWalletTypesByAdmin",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletTypeDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletTypeDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListDeepPhysicalWalletTypeDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwallettypebyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get physical wallet type by id",
        "operationId": "GetPhysicalWalletTypeById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTypeDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTypeDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeepPhysicalWalletTypeDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3025": {
                    "summary": "Error-3025",
                    "value": {
                      "code": 3025,
                      "message": "Physical wallet type not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletephysicalwallettype": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete physical wallet type by id",
        "operationId": "DeletePhysicalWalletType",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-3025": {
                    "summary": "Error-3025",
                    "value": {
                      "code": 3025,
                      "message": "Physical wallet type not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getallissuers": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "get all breau Issuer names",
        "operationId": "GetAllIssuers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllIssuersResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllIssuersResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllIssuersResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getphysicalwalletsbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get physical wallets by admin",
        "operationId": "GetPhysicalWalletsByAdmin",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "user Id(option)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListPhysicalWalletDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListPhysicalWalletDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListPhysicalWalletDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getallcountries": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all countries in the world",
        "operationId": "GetAllCountries",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListCountryDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListCountryDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListCountryDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getavailableregionsbyadmin": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get available regions for the admin session or for any user if provided.",
        "operationId": "GetAvailableRegionsByAdmin",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableRegionsSuccessDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableRegionsSuccessDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableRegionsSuccessDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/createregion": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "create Region",
        "operationId": "CreateRegion",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateRegionResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateRegionResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateRegionResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2044": {
                    "summary": "Error-2044",
                    "value": {
                      "code": 2044,
                      "message": "Region name Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2045": {
                    "summary": "Error-2045",
                    "value": {
                      "code": 2045,
                      "message": "Region isoname Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2047": {
                    "summary": "Error-2047",
                    "value": {
                      "code": 2047,
                      "message": "Region IsoName Invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2047": {
                    "summary": "Error-2047",
                    "value": {
                      "code": 2047,
                      "message": "Region IsoName Invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-2049": {
                    "summary": "Error-2049",
                    "value": {
                      "code": 2049,
                      "message": "Region with same name already exists",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updateregion": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "update Region",
        "operationId": "UpdateRegion",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRegionDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRegionDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRegionDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2044": {
                    "summary": "Error-2044",
                    "value": {
                      "code": 2044,
                      "message": "Region name Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2045": {
                    "summary": "Error-2045",
                    "value": {
                      "code": 2045,
                      "message": "Region isoname Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2046": {
                    "summary": "Error-2046",
                    "value": {
                      "code": 2046,
                      "message": "Region not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2047": {
                    "summary": "Error-2047",
                    "value": {
                      "code": 2047,
                      "message": "Region IsoName Invalid",
                      "statusCode": 422
                    }
                  },
                  "Error-2049": {
                    "summary": "Error-2049",
                    "value": {
                      "code": 2049,
                      "message": "Region with same name already exists",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getregionbyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get region by Id",
        "operationId": "GetRegionById",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRegionDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRegionDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRegionDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2046": {
                    "summary": "Error-2046",
                    "value": {
                      "code": 2046,
                      "message": "Region not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getregions": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "get regions by paging",
        "operationId": "GetRegions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListRegionDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListRegionDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListRegionDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deleteregion": {
      "delete": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete Region",
        "operationId": "DeleteRegion",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2046": {
                    "summary": "Error-2046",
                    "value": {
                      "code": 2046,
                      "message": "Region not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/undeleteregion": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "UnDelete Region",
        "operationId": "UnDeleteRegion",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeleteRegionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeleteRegionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnDeleteRegionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2044": {
                    "summary": "Error-2044",
                    "value": {
                      "code": 2044,
                      "message": "Region name Required",
                      "statusCode": 400
                    }
                  },
                  "Error-2045": {
                    "summary": "Error-2045",
                    "value": {
                      "code": 2045,
                      "message": "Region isoname Required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2046": {
                    "summary": "Error-2046",
                    "value": {
                      "code": 2046,
                      "message": "Region not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getallstickers": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all stickers",
        "operationId": "GetAllStickers",
        "parameters": [
          {
            "name": "serial",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllStickersDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllStickersDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllStickersDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getstickerpincode": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get sticker pin code",
        "operationId": "GetStickerPinCode",
        "parameters": [
          {
            "name": "serial",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetStickerPinCodeDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetStickerPinCodeDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetStickerPinCodeDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/generatereturncodes": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GenerateReturnCodes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListReturnCodesDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListReturnCodesDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListReturnCodesDtoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/ping": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "Ping",
        "parameters": [
          {
            "name": "returnCode",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ReturnCodes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getsettings": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get the system wide settings.",
        "operationId": "GetSettings",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSystemSettingsDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSystemSettingsDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSystemSettingsDtoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/updatesettings": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Update the system wide settings",
        "operationId": "UpdateSettings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSystemSettingsDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSystemSettingsDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSystemSettingsDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1007": {
                    "summary": "Error-1007",
                    "value": {
                      "code": 1007,
                      "message": "Invalid email",
                      "statusCode": 400
                    }
                  },
                  "Error-2705": {
                    "summary": "Error-2705",
                    "value": {
                      "code": 2705,
                      "message": "External service type invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2702": {
                    "summary": "Error-2702",
                    "value": {
                      "code": 2702,
                      "message": "External service class id invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2703": {
                    "summary": "Error-2703",
                    "value": {
                      "code": 2703,
                      "message": "External service url required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2041": {
                    "summary": "Error-2041",
                    "value": {
                      "code": 2041,
                      "message": "Currency not found",
                      "statusCode": 404
                    }
                  },
                  "Error-2701": {
                    "summary": "Error-2701",
                    "value": {
                      "code": 2701,
                      "message": "System settings not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getexternalserviceclassids": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "get all external service instance class ids",
        "operationId": "GetExternalServiceClassIds",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetServiceClassIdResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetServiceClassIdResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListGetServiceClassIdResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getvenuesbymerchantid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get venues by merchant id",
        "operationId": "GetVenuesByMerchantId",
        "parameters": [
          {
            "name": "merchantId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenuesByMerchantIdDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenuesByMerchantIdDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenuesByMerchantIdDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/gettipeesbyvenueid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get Tipees by venue id",
        "operationId": "GetTipeesByVenueId",
        "parameters": [
          {
            "name": "venueId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTipeesByVenueIdDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTipeesByVenueIdDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTipeesByVenueIdDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletevenue": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete Venue",
        "operationId": "DeleteVenue",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVenueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVenueRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVenueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteVenueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteVenueDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteVenueDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/deletemerchant": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Delete Merchant",
        "operationId": "DeleteMerchant",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMerchantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMerchantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMerchantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteMerchantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteMerchantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteMerchantDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getalltransactions": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get all transactions for all users as admin user",
        "operationId": "GetAllTransactions",
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Wallet"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "paymentMethodTypesFrom",
            "in": "query",
            "description": "An array of allowed PaymentMethodTypes (Card, Bank,CustCrypto,Ativos,Prepaid,LocalCrypto,Crypto,ThirdPartyLoyalty,InternalLoyalty)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentMethodTypeValues"
              }
            }
          },
          {
            "name": "paymentMethodTypesTo",
            "in": "query",
            "description": "An array of allowed PaymentMethodTypes (Card, Bank,CustCrypto,Ativos,Prepaid,LocalCrypto,Crypto,ThirdPartyLoyalty,InternalLoyalty)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentMethodTypeValues"
              }
            }
          },
          {
            "name": "transactionTypes",
            "in": "query",
            "description": "An array of allowed transaction Types (Exchange,InternalTransfer,ExteralTransferIn,ExternalTransferOut)",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TransactionTypeValues"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllTransactionsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllTransactionsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAllTransactionsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/gettransactionbyid": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GetTransactionById",
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessTransactionDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessTransactionDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessTransactionDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "417": {
            "description": "ExpectationFailed",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-4000": {
                    "summary": "Error-4000",
                    "value": {
                      "code": 4000,
                      "message": "Transaction not found",
                      "statusCode": 417
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/gettransactionnumber": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "number of transactions last 7 days, last 30 days, last 3 months (90 days), last year",
        "operationId": "GetTransactionNumber",
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Wallet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionNumberDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionNumberDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionNumberDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getsendouttransactionsamounts": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "amount sent out out last 7 days, last 30 days, last 3 months (90 days), last year",
        "operationId": "GetSendOutTransactionsAmounts",
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Wallet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSendOutTransactionsAmountsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSendOutTransactionsAmountsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSendOutTransactionsAmountsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getreceivetransactionsamounts": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "amount received in last 7 days, last 30 days, last 3 months (90 days), last year",
        "operationId": "GetReceiveTransactionsAmounts",
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Wallet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetReceiveTransactionsAmountsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetReceiveTransactionsAmountsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetReceiveTransactionsAmountsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getexchangetransactionsamounts": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "amount exchanged last 7 days, last 30 days, last 3 months (90 days), last year",
        "operationId": "GetExchangeTransactionsAmounts",
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Wallet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetExchangeTransactionsAmountsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetExchangeTransactionsAmountsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetExchangeTransactionsAmountsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/getsummarytransactionfeesamounts": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GetSummaryTransactionFeesAmounts",
        "parameters": [
          {
            "name": "application",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "Wallet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSummaryTransactionFeeAmountsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSummaryTransactionFeeAmountsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetSummaryTransactionFeeAmountsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/gettransactionfeesamounts": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get transaction fee amount by period unit : date,month, quarter, year",
        "operationId": "GetTransactionFeesAmounts",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionFeesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionFeesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionFeesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionFeeAmountsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionFeeAmountsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionFeeAmountsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2029": {
                    "summary": "Error-2029",
                    "value": {
                      "code": 2029,
                      "message": "Time range invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2030": {
                    "summary": "Error-2030",
                    "value": {
                      "code": 2030,
                      "message": "Year filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2028": {
                    "summary": "Error-2028",
                    "value": {
                      "code": 2028,
                      "message": "Year invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2031": {
                    "summary": "Error-2031",
                    "value": {
                      "code": 2031,
                      "message": "Month filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2027": {
                    "summary": "Error-2027",
                    "value": {
                      "code": 2027,
                      "message": "Month invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2032": {
                    "summary": "Error-2032",
                    "value": {
                      "code": 2032,
                      "message": "Quarter filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2033": {
                    "summary": "Error-2033",
                    "value": {
                      "code": 2033,
                      "message": "Date filter required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2508": {
                    "summary": "Error-2508",
                    "value": {
                      "code": 2508,
                      "message": "Currency not supported",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/gettransactionfeesamountsbybasecurrency": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "Get transaction fee amoun for base currency by period unit : date,month, quarter, year",
        "operationId": "GetTransactionFeesAmountsByBaseCurrency",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionFeesByBaseCurrencyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionFeesByBaseCurrencyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionFeesByBaseCurrencyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionFeeAmountsByBaseCurrencyDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionFeeAmountsByBaseCurrencyDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionFeeAmountsByBaseCurrencyDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2029": {
                    "summary": "Error-2029",
                    "value": {
                      "code": 2029,
                      "message": "Time range invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2030": {
                    "summary": "Error-2030",
                    "value": {
                      "code": 2030,
                      "message": "Year filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2028": {
                    "summary": "Error-2028",
                    "value": {
                      "code": 2028,
                      "message": "Year invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2031": {
                    "summary": "Error-2031",
                    "value": {
                      "code": 2031,
                      "message": "Month filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2027": {
                    "summary": "Error-2027",
                    "value": {
                      "code": 2027,
                      "message": "Month invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2032": {
                    "summary": "Error-2032",
                    "value": {
                      "code": 2032,
                      "message": "Quarter filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2033": {
                    "summary": "Error-2033",
                    "value": {
                      "code": 2033,
                      "message": "Date filter required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  },
                  "Error-2034": {
                    "summary": "Error-2034",
                    "value": {
                      "code": 2034,
                      "message": "Base currency not configurated yet",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2508": {
                    "summary": "Error-2508",
                    "value": {
                      "code": 2508,
                      "message": "Currency not supported",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/gettransactionamounts": {
      "post": {
        "tags": [
          "SuperAdmin"
        ],
        "operationId": "GetTransactionAmounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionAmountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionAmountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionAmountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionAmountsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionAmountsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionAmountsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2029": {
                    "summary": "Error-2029",
                    "value": {
                      "code": 2029,
                      "message": "Time range invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2030": {
                    "summary": "Error-2030",
                    "value": {
                      "code": 2030,
                      "message": "Year filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2028": {
                    "summary": "Error-2028",
                    "value": {
                      "code": 2028,
                      "message": "Year invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2031": {
                    "summary": "Error-2031",
                    "value": {
                      "code": 2031,
                      "message": "Month filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2027": {
                    "summary": "Error-2027",
                    "value": {
                      "code": 2027,
                      "message": "Month invalid,{0}",
                      "statusCode": 400
                    }
                  },
                  "Error-2032": {
                    "summary": "Error-2032",
                    "value": {
                      "code": 2032,
                      "message": "Quarter filter required",
                      "statusCode": 400
                    }
                  },
                  "Error-2033": {
                    "summary": "Error-2033",
                    "value": {
                      "code": 2033,
                      "message": "Date filter required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2508": {
                    "summary": "Error-2508",
                    "value": {
                      "code": 2508,
                      "message": "Currency not supported",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/superadmin/regeneratetransactionbaserate": {
      "get": {
        "tags": [
          "SuperAdmin"
        ],
        "summary": "regenerate transaction base rate",
        "operationId": "RegenerateTransactionBaseRate",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/tipsee/chargecard": {
      "post": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Charge the user card (in the provided currency) and put the charged amount into the prepaid account of the same currency for the same user.",
        "operationId": "ChargeCard",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeCardRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeCardRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessChargeCardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessChargeCardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessChargeCardDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/sendtip": {
      "post": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Send tip to tipee",
        "operationId": "SendTip",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTipRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendTipRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendTipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendTipDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendTipDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendTipDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-2606": {
                    "summary": "Error-2606",
                    "value": {
                      "code": 2606,
                      "message": "You are not currently working in a venue",
                      "statusCode": 400
                    }
                  },
                  "Error-2608": {
                    "summary": "Error-2608",
                    "value": {
                      "code": 2608,
                      "message": "You are currently not close enough to the roaming Tipee",
                      "statusCode": 400
                    }
                  },
                  "Error-2607": {
                    "summary": "Error-2607",
                    "value": {
                      "code": 2607,
                      "message": "You are currently not in the venue of the Tipee",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/getroamingusers": {
      "post": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Get Roaming users",
        "operationId": "GetRoamingUsers",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRoamingUsersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRoamingUsersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetRoamingUsersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRoamingUsersDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRoamingUsersDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRoamingUsersDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/startworking": {
      "post": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Set start working for tipee",
        "operationId": "StartWorking",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartWorkingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StartWorkingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StartWorkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStartWorkingDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStartWorkingDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStartWorkingDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2610": {
                    "summary": "Error-2610",
                    "value": {
                      "code": 2610,
                      "message": "Work hours invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2611": {
                    "summary": "Error-2611",
                    "value": {
                      "code": 2611,
                      "message": "Work minutes invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/getworking": {
      "get": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Get tipee working time",
        "operationId": "GetWorking",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetWorkingDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetWorkingDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetWorkingDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/stopworking": {
      "post": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Tipee stop working",
        "operationId": "StopWorking",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopWorkingRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/StopWorkingRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/StopWorkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStopWorkingDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStopWorkingDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessStopWorkingDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/getpendingtips": {
      "get": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Get pending tips of tipee",
        "operationId": "GetPendingTips",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPendingTipsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPendingTipsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPendingTipsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 400
                    }
                  },
                  "Error-2004": {
                    "summary": "Error-2004",
                    "value": {
                      "code": 2004,
                      "message": "Currency not supported for prepaid account",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/setlocation": {
      "post": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Set geographical location for user",
        "operationId": "SetLocation",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLocationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLocationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLocationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetLocationDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetLocationDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetLocationDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tipsee/claimpendingtips": {
      "post": {
        "tags": [
          "Tipsee"
        ],
        "summary": "Claim pending tips for tipee",
        "operationId": "ClaimPendingTips",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimPendingTipsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimPendingTipsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimPendingTipsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessClaimPendingTipsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessClaimPendingTipsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessClaimPendingTipsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2609": {
                    "summary": "Error-2609",
                    "value": {
                      "code": 2609,
                      "message": "You have no bank account Please add one before claiming tips.",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-2519": {
                    "summary": "Error-2519",
                    "value": {
                      "code": 2519,
                      "message": "Sticker transaction package Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2018": {
                    "summary": "Error-2018",
                    "value": {
                      "code": 2018,
                      "message": "Access denied",
                      "statusCode": 400
                    }
                  },
                  "Error-2001": {
                    "summary": "Error-2001",
                    "value": {
                      "code": 2001,
                      "message": "This payment method cannot be exchanged",
                      "statusCode": 400
                    }
                  },
                  "Error-2002": {
                    "summary": "Error-2002",
                    "value": {
                      "code": 2002,
                      "message": "This payment method cannot be sent to a bank account in your region",
                      "statusCode": 400
                    }
                  },
                  "Error-2003": {
                    "summary": "Error-2003",
                    "value": {
                      "code": 2003,
                      "message": "The request currency does not match the source payment method currency",
                      "statusCode": 400
                    }
                  },
                  "Error-2010": {
                    "summary": "Error-2010",
                    "value": {
                      "code": 2010,
                      "message": "You cannot send funds from one account to the same account",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/finduserbymobilenumber": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Find user by mobile numer",
        "operationId": "FindUserByMobileNumber",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindUserByMobileNumberRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindUserByMobileNumberRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindUserByMobileNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFindUserByMobileNumberDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFindUserByMobileNumberDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFindUserByMobileNumberDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1015": {
                    "summary": "Error-1015",
                    "value": {
                      "code": 1015,
                      "message": "Cannot find any users",
                      "statusCode": 400
                    }
                  },
                  "Error-1016": {
                    "summary": "Error-1016",
                    "value": {
                      "code": 1016,
                      "message": "Cannot search myself as contact",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/finduserbymobileemail": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Find User by email",
        "operationId": "FindUserByMobileEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindUserByMobileEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FindUserByMobileEmailRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FindUserByMobileEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFindUserByMobileEmailDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFindUserByMobileEmailDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFindUserByMobileEmailDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1007": {
                    "summary": "Error-1007",
                    "value": {
                      "code": 1007,
                      "message": "Invalid email",
                      "statusCode": 400
                    }
                  },
                  "Error-1015": {
                    "summary": "Error-1015",
                    "value": {
                      "code": 1015,
                      "message": "Cannot find any users",
                      "statusCode": 400
                    }
                  },
                  "Error-1019": {
                    "summary": "Error-1019",
                    "value": {
                      "code": 1019,
                      "message": "User cannot search for itself",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/getavailableregions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get available regions",
        "operationId": "GetAvailableRegions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableRegionsSuccessDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableRegionsSuccessDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAvailableRegionsSuccessDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/editcontact": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Edit contact",
        "operationId": "EditContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditContactRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditContactRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditContactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditContactDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditContactDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditContactDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-1018": {
                    "summary": "Error-1018",
                    "value": {
                      "code": 1018,
                      "message": "Contact does not exist for this user",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/removecontact": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Remove contact",
        "operationId": "RemoveContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveContactRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveContactRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveContactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRemoveContactDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRemoveContactDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRemoveContactDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-1018": {
                    "summary": "Error-1018",
                    "value": {
                      "code": 1018,
                      "message": "Contact does not exist for this user",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/addcontact": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add contact",
        "operationId": "AddContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddContactDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddContactDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddContactDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-1102": {
                    "summary": "Error-1102",
                    "value": {
                      "code": 1102,
                      "message": "User account is inactive",
                      "statusCode": 400
                    }
                  },
                  "Error-1017": {
                    "summary": "Error-1017",
                    "value": {
                      "code": 1017,
                      "message": "User is already a contact",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/getcontacts": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get contacts",
        "operationId": "GetContacts",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetContactsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetContactsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetContactsDto"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/updatedevice": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update Device info",
        "operationId": "UpdateDevice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUpdateDeviceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUpdateDeviceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUpdateDeviceDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1037": {
                    "summary": "Error-1037",
                    "value": {
                      "code": 1037,
                      "message": "UUID device required",
                      "statusCode": 400
                    }
                  },
                  "Error-1038": {
                    "summary": "Error-1038",
                    "value": {
                      "code": 1038,
                      "message": "Token device required",
                      "statusCode": 400
                    }
                  },
                  "Error-2700": {
                    "summary": "Error-2700",
                    "value": {
                      "code": 2700,
                      "message": "Cannot find device",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/fetchdevices": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all devices",
        "operationId": "FetchDevices",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFetchDevicesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFetchDevicesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessFetchDevicesDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/adddevice": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Adding mobile devices for a particular user.",
        "operationId": "AddDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeviceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeviceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddDeviceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddDeviceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddDeviceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddDeviceDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/setauth": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "This function stores the PIN the user picks, generate a keypair and store the frontend (app) generated\r\npublic key.",
        "operationId": "SetAuth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAuthRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAuthRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetAuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetAuthDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetAuthDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetAuthDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1035": {
                    "summary": "Error-1035",
                    "value": {
                      "code": 1035,
                      "message": "Pin required",
                      "statusCode": 400
                    }
                  },
                  "Error-1036": {
                    "summary": "Error-1036",
                    "value": {
                      "code": 1036,
                      "message": "Public key required",
                      "statusCode": 400
                    }
                  },
                  "Error-1009": {
                    "summary": "Error-1009",
                    "value": {
                      "code": 1009,
                      "message": "Invalid public key",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/setbiometrics": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "",
        "description": "Should this be used for setting at a later time as welL?\r\nWe assume so",
        "operationId": "SetBiometrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetBiometricsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetBiometricsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetBiometricsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetBiometricsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetBiometricsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetBiometricsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1036": {
                    "summary": "Error-1036",
                    "value": {
                      "code": 1036,
                      "message": "Public key required",
                      "statusCode": 400
                    }
                  },
                  "Error-1009": {
                    "summary": "Error-1009",
                    "value": {
                      "code": 1009,
                      "message": "Invalid public key",
                      "statusCode": 400
                    }
                  },
                  "Error-1015": {
                    "summary": "Error-1015",
                    "value": {
                      "code": 1015,
                      "message": "Cannot find any users",
                      "statusCode": 400
                    }
                  },
                  "Error-1031": {
                    "summary": "Error-1031",
                    "value": {
                      "code": 1031,
                      "message": "User account is not verified sms yet",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/setpin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Set pin",
        "operationId": "SetPIN",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPINRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPINRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPINRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPINDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPINDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPINDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1035": {
                    "summary": "Error-1035",
                    "value": {
                      "code": 1035,
                      "message": "Pin required",
                      "statusCode": 400
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/getuserinfo": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Can only be called on *self* or by admin. This is PII information and hence it is ‘heavy’ to retrieve from the db in production situations.\r\n            \r\nNote: this method does not have consistent return values; must fix!",
        "operationId": "GetUserInfo",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserInfoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserInfoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserInfoDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/setuserinfo": {
      "post": {
        "tags": [
          "User"
        ],
        "operationId": "SetUserInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserInfoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserInfoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetUserInfoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetUserInfoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetUserInfoDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1039": {
                    "summary": "Error-1039",
                    "value": {
                      "code": 1039,
                      "message": "FirstName required",
                      "statusCode": 400
                    }
                  },
                  "Error-1040": {
                    "summary": "Error-1040",
                    "value": {
                      "code": 1040,
                      "message": "LastName required",
                      "statusCode": 400
                    }
                  },
                  "Error-1041": {
                    "summary": "Error-1041",
                    "value": {
                      "code": 1041,
                      "message": "Country required",
                      "statusCode": 400
                    }
                  },
                  "Error-1007": {
                    "summary": "Error-1007",
                    "value": {
                      "code": 1007,
                      "message": "Invalid email",
                      "statusCode": 400
                    }
                  },
                  "Error-1012": {
                    "summary": "Error-1012",
                    "value": {
                      "code": 1012,
                      "message": "Invalid Country",
                      "statusCode": 400
                    }
                  },
                  "Error-1502": {
                    "summary": "Error-1502",
                    "value": {
                      "code": 1502,
                      "message": "Application Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-1021": {
                    "summary": "Error-1021",
                    "value": {
                      "code": 1021,
                      "message": "Missing parameter mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1023": {
                    "summary": "Error-1023",
                    "value": {
                      "code": 1023,
                      "message": "Email Unverified",
                      "statusCode": 400
                    }
                  },
                  "Error-1028": {
                    "summary": "Error-1028",
                    "value": {
                      "code": 1028,
                      "message": "Mobile number not verified",
                      "statusCode": 400
                    }
                  },
                  "Error-1029": {
                    "summary": "Error-1029",
                    "value": {
                      "code": 1029,
                      "message": "User did not set the PIN yet",
                      "statusCode": 400
                    }
                  },
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/verifykycdocument": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "create Kyc",
        "operationId": "VerifyKycDocument",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Level": {
                    "$ref": "#/components/schemas/KycLevelValues"
                  },
                  "DocumentType": {
                    "$ref": "#/components/schemas/KycDocumentTypeValues"
                  },
                  "FrontSideImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "BackSideImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "FrontFaceImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "ProofOfAddressImage": {
                    "type": "string",
                    "format": "binary"
                  },
                  "ProofOfIncomeImage": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "Level": {
                  "style": "form"
                },
                "DocumentType": {
                  "style": "form"
                },
                "FrontSideImage": {
                  "style": "form"
                },
                "BackSideImage": {
                  "style": "form"
                },
                "FrontFaceImage": {
                  "style": "form"
                },
                "ProofOfAddressImage": {
                  "style": "form"
                },
                "ProofOfIncomeImage": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyKycDocumentResultDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyKycDocumentResultDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyKycDocumentResultDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1051": {
                    "summary": "Error-1051",
                    "value": {
                      "code": 1051,
                      "message": "Front side image required",
                      "statusCode": 400
                    }
                  },
                  "Error-1052": {
                    "summary": "Error-1052",
                    "value": {
                      "code": 1052,
                      "message": "Front side image type invalid,only accept JPEG,PNG,BMP,JPG",
                      "statusCode": 400
                    }
                  },
                  "Error-1054": {
                    "summary": "Error-1054",
                    "value": {
                      "code": 1054,
                      "message": "Back side image required",
                      "statusCode": 400
                    }
                  },
                  "Error-1055": {
                    "summary": "Error-1055",
                    "value": {
                      "code": 1055,
                      "message": "Back side image type invalid,only accept JPEG,PNG,BMP,JPG",
                      "statusCode": 400
                    }
                  },
                  "Error-1057": {
                    "summary": "Error-1057",
                    "value": {
                      "code": 1057,
                      "message": "Front face image required",
                      "statusCode": 400
                    }
                  },
                  "Error-1058": {
                    "summary": "Error-1058",
                    "value": {
                      "code": 1058,
                      "message": "Front face image type invalid,only accept JPEG,PNG,BMP,JPG ",
                      "statusCode": 400
                    }
                  },
                  "Error-1063": {
                    "summary": "Error-1063",
                    "value": {
                      "code": 1063,
                      "message": "Proof of address image required",
                      "statusCode": 400
                    }
                  },
                  "Error-1064": {
                    "summary": "Error-1064",
                    "value": {
                      "code": 1064,
                      "message": "Proof of address type invalid,,only accept JPEG,PNG,BMP,JPG,DOC,XLSX,PDF",
                      "statusCode": 400
                    }
                  },
                  "Error-1066": {
                    "summary": "Error-1066",
                    "value": {
                      "code": 1066,
                      "message": "Proof of income image required",
                      "statusCode": 400
                    }
                  },
                  "Error-1067": {
                    "summary": "Error-1067",
                    "value": {
                      "code": 1067,
                      "message": "Proof of income image type invalid,,only accept JPEG,PNG,BMP,JPG,DOC,XLSX,PDF",
                      "statusCode": 400
                    }
                  },
                  "Error-1061": {
                    "summary": "Error-1061",
                    "value": {
                      "code": 1061,
                      "message": "Kyc level invalid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-1060": {
                    "summary": "Error-1060",
                    "value": {
                      "code": 1060,
                      "message": "Kyc not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "UnprocessableEntity",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1062": {
                    "summary": "Error-1062",
                    "value": {
                      "code": 1062,
                      "message": "Kyc with this level already approved",
                      "statusCode": 422
                    }
                  },
                  "Error-1069": {
                    "summary": "Error-1069",
                    "value": {
                      "code": 1069,
                      "message": "Verify kyc not allowed",
                      "statusCode": 422
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/getkyc": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "get kyc for current user",
        "operationId": "GetKyc",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessKycDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessKycDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessKycDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-1060": {
                    "summary": "Error-1060",
                    "value": {
                      "code": 1060,
                      "message": "Kyc not found",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logout",
        "operationId": "Logout",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutInfoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutInfoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLogoutDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLogoutDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLogoutDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/canlogin": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "",
        "description": "Should this be distinct from a version where we use password?",
        "operationId": "CanLogin",
        "parameters": [
          {
            "name": "reference",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCanLoginDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCanLoginDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCanLoginDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/loginpin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Login by pin",
        "operationId": "LoginPIN",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPINRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPINRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPINRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginPINDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginPINDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginPINDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1042": {
                    "summary": "Error-1042",
                    "value": {
                      "code": 1042,
                      "message": "Login info required",
                      "statusCode": 400
                    }
                  },
                  "Error-1043": {
                    "summary": "Error-1043",
                    "value": {
                      "code": 1043,
                      "message": "Password required",
                      "statusCode": 400
                    }
                  },
                  "Error-1350": {
                    "summary": "Error-1350",
                    "value": {
                      "code": 1350,
                      "message": "Invalid Login Combination",
                      "statusCode": 400
                    }
                  },
                  "Error-1301": {
                    "summary": "Error-1301",
                    "value": {
                      "code": 1301,
                      "message": "User not belong this application",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/loginpassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Simple login with a password.",
        "operationId": "LoginPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginPINDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginPINDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginPINDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1042": {
                    "summary": "Error-1042",
                    "value": {
                      "code": 1042,
                      "message": "Login info required",
                      "statusCode": 400
                    }
                  },
                  "Error-1043": {
                    "summary": "Error-1043",
                    "value": {
                      "code": 1043,
                      "message": "Password required",
                      "statusCode": 400
                    }
                  },
                  "Error-1350": {
                    "summary": "Error-1350",
                    "value": {
                      "code": 1350,
                      "message": "Invalid Login Combination",
                      "statusCode": 400
                    }
                  },
                  "Error-1301": {
                    "summary": "Error-1301",
                    "value": {
                      "code": 1301,
                      "message": "User not belong this application",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/loginbiometrics": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Verifies the biometric message from the client for this user;\r\nif it verifies, the user is allowed to continue, otherwise, not",
        "operationId": "LoginBiometrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBiometricsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBiometricsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBiometricsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginBiometricsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginBiometricsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLoginBiometricsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1350": {
                    "summary": "Error-1350",
                    "value": {
                      "code": 1350,
                      "message": "Invalid Login Combination",
                      "statusCode": 400
                    }
                  },
                  "Error-1010": {
                    "summary": "Error-1010",
                    "value": {
                      "code": 1010,
                      "message": "No Biometric Key Set",
                      "statusCode": 400
                    }
                  },
                  "Error-1044": {
                    "summary": "Error-1044",
                    "value": {
                      "code": 1044,
                      "message": "MobileNumber required",
                      "statusCode": 400
                    }
                  },
                  "Error-1011": {
                    "summary": "Error-1011",
                    "value": {
                      "code": 1011,
                      "message": "Invalid Biometric Authentication",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/forgotpin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Forgot pin",
        "operationId": "ForgotPin",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPinRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPinRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessForgotPinDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessForgotPinDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessForgotPinDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1035": {
                    "summary": "Error-1035",
                    "value": {
                      "code": 1035,
                      "message": "Pin required",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1350": {
                    "summary": "Error-1350",
                    "value": {
                      "code": 1350,
                      "message": "Invalid Login Combination",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/forgetpin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "",
        "operationId": "ForgetPin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPinRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPinRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPinRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessForgotPinDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessForgotPinDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessForgotPinDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1035": {
                    "summary": "Error-1035",
                    "value": {
                      "code": 1035,
                      "message": "Pin required",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1350": {
                    "summary": "Error-1350",
                    "value": {
                      "code": 1350,
                      "message": "Invalid Login Combination",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/getprofile": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the user profile; does the user has to be logged on ?",
        "operationId": "GetProfile",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetProfileDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetProfileDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/setprofile": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Does the user has to be logged ON?",
        "operationId": "SetProfile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "NickName": {
                    "type": "string"
                  },
                  "Description": {
                    "type": "string"
                  },
                  "Image": {
                    "type": "string",
                    "format": "binary"
                  },
                  "ShowNickName": {
                    "type": "boolean"
                  }
                }
              },
              "encoding": {
                "NickName": {
                  "style": "form"
                },
                "Description": {
                  "style": "form"
                },
                "Image": {
                  "style": "form"
                },
                "ShowNickName": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetProfileDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetProfileDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/issessionactive": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "IsSessionActive",
        "parameters": [
          {
            "name": "sessionToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessIsSessionActiveDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessIsSessionActiveDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessIsSessionActiveDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/createsession": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create session",
        "operationId": "CreateSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateSessionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateSessionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateSessionDto"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-100": {
                    "summary": "Error-100",
                    "value": {
                      "code": 100,
                      "message": "Invalid API Key",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/setsessionexpire": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "use for test session expire",
        "operationId": "SetSessionExpire",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSessionExpireRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSessionExpireRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetSessionExpireRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetSessionExpireDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetSessionExpireDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetSessionExpireDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/verifymobile": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Request verify mobile sms",
        "operationId": "VerifyMobile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMobileRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMobileRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMobileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyMobileDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyMobileDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyMobileDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1044": {
                    "summary": "Error-1044",
                    "value": {
                      "code": 1044,
                      "message": "MobileNumber required",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1014": {
                    "summary": "Error-1014",
                    "value": {
                      "code": 1014,
                      "message": "Too many OTP SMSs sent to this number, contact the administrator",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/verifysms": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Verify sms",
        "operationId": "VerifySMS",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySMSRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySMSRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySMSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifySMSDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifySMSDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifySMSDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  },
                  "Error-1002": {
                    "summary": "Error-1002",
                    "value": {
                      "code": 1002,
                      "message": "Invalid OTP",
                      "statusCode": 400
                    }
                  },
                  "Error-1003": {
                    "summary": "Error-1003",
                    "value": {
                      "code": 1003,
                      "message": "Mobile number exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/resendsms": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "ResendSMS",
        "operationId": "ResendSMS",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendSMSRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendSMSRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResendSMSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResendSMSDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResendSMSDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResendSMSDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1004": {
                    "summary": "Error-1004",
                    "value": {
                      "code": 1004,
                      "message": "Wait 60s to verify from last sent",
                      "statusCode": 400
                    }
                  },
                  "Error-1014": {
                    "summary": "Error-1014",
                    "value": {
                      "code": 1014,
                      "message": "Too many OTP SMSs sent to this number, contact the administrator",
                      "statusCode": 400
                    }
                  },
                  "Error-1001": {
                    "summary": "Error-1001",
                    "value": {
                      "code": 1001,
                      "message": "Invalid mobile number",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/verifyemail": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send the verification email with an OTP in it the user has to reproduce.\r\n            \r\nThis can be sent to anyone with a session; no need to have an account yet.",
        "operationId": "VerifyEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyEmailDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyEmailDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyEmailDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1007": {
                    "summary": "Error-1007",
                    "value": {
                      "code": 1007,
                      "message": "Invalid email",
                      "statusCode": 400
                    }
                  },
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 400
                    }
                  },
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/verifyemailcodebyuid": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "This is the verify for the the web; this is needed when you don't have an in-app functionality for settling the verification.",
        "operationId": "VerifyEmailCodeByUID",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pin",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/verifyemailcode": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "This is the API call to verify the code.",
        "operationId": "VerifyEmailCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailCodeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailCodeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyEmailCodeDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyEmailCodeDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessVerifyEmailCodeDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1007": {
                    "summary": "Error-1007",
                    "value": {
                      "code": 1007,
                      "message": "Invalid email",
                      "statusCode": 400
                    }
                  },
                  "Error-1002": {
                    "summary": "Error-1002",
                    "value": {
                      "code": 1002,
                      "message": "Invalid OTP",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/resendemail": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Resend email",
        "operationId": "ResendEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResendEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResendEmailDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResendEmailDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResendEmailDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1004": {
                    "summary": "Error-1004",
                    "value": {
                      "code": 1004,
                      "message": "Wait 60s to verify from last sent",
                      "statusCode": 400
                    }
                  },
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getfreevenues": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Find all active venues around some lat/lng",
        "operationId": "GetFreeVenues",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "description": "latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "lng",
            "in": "query",
            "description": "longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "distanceKm",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetFreeVenuesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetFreeVenuesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetFreeVenuesDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getvenues": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Find all active venues around some lat/lng",
        "operationId": "GetVenues",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "description": "latitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "lng",
            "in": "query",
            "description": "longitude",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "distanceKm",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenuesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenuesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenuesDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/joinvenue": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Join user to venue",
        "operationId": "JoinVenue",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinVenueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinVenueRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JoinVenueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessJoinVenueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessJoinVenueDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessJoinVenueDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2602": {
                    "summary": "Error-2602",
                    "value": {
                      "code": 2602,
                      "message": "Invalid Venue",
                      "statusCode": 400
                    }
                  },
                  "Error-2603": {
                    "summary": "Error-2603",
                    "value": {
                      "code": 2603,
                      "message": "Inactive Venue",
                      "statusCode": 400
                    }
                  },
                  "Error-2604": {
                    "summary": "Error-2604",
                    "value": {
                      "code": 2604,
                      "message": "Venue already in your list",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/leavevenue": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Leave user out venue",
        "operationId": "LeaveVenue",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveVenueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveVenueRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LeaveVenueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLeaveVenueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLeaveVenueDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLeaveVenueDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/lockactivity": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "lock venue activity",
        "operationId": "LockActivity",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockActivityRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LockActivityRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LockActivityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLockActivityDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLockActivityDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLockActivityDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getlockstatus": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Get venue lock status",
        "operationId": "GetLockStatus",
        "parameters": [
          {
            "name": "venueId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetLockStatusDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetLockStatusDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetLockStatusDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getpolicy": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Get venue policy",
        "operationId": "GetPolicy",
        "parameters": [
          {
            "name": "venueId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPolicyDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPolicyDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPolicyDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/setpolicy": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Set venue policy",
        "operationId": "SetPolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPolicyRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPolicyRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPolicyDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPolicyDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPolicyDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/addvenue": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Add venue to merchant",
        "operationId": "AddVenue",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddVenueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddVenueRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddVenueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddVenueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddVenueDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddVenueDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/editvenue": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Edit venue",
        "operationId": "EditVenue",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditVenueRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditVenueRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditVenueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditVenueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditVenueDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditVenueDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getvenue": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Get venue info",
        "operationId": "GetVenue",
        "parameters": [
          {
            "name": "venueId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenueDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVenueDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getusers": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Get users in venue",
        "operationId": "GetUsers",
        "parameters": [
          {
            "name": "venueId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "validated",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUsersDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUsersDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUsersDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getuser": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Get user info which in venue",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "venueId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/setuserstatus": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Set active status or not for user in venue",
        "operationId": "SetUserStatus",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserStatusRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserStatusRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetUserStatusDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetUserStatusDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetUserStatusDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/removeuser": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Remove user out venue",
        "operationId": "RemoveUser",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRemoveUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRemoveUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRemoveUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/addmerchant": {
      "post": {
        "tags": [
          "Venue"
        ],
        "summary": "Add merchant",
        "operationId": "AddMerchant",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMerchantRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMerchantRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddMerchantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddMerchantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddMerchantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddMerchantDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1032": {
                    "summary": "Error-1032",
                    "value": {
                      "code": 1032,
                      "message": "Email already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  },
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/venue/getmerchants": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "Get merchants",
        "operationId": "GetMerchants",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMerchantsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMerchantsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMerchantsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1032": {
                    "summary": "Error-1032",
                    "value": {
                      "code": 1032,
                      "message": "Email already exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  },
                  "Error-1501": {
                    "summary": "Error-1501",
                    "value": {
                      "code": 1501,
                      "message": "Insufficient permissions",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/sendtobank": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Send funds from a payment method to an external bank account. This external account can be SWIFT or local account. \r\nThe required parameters depend on the type of bank account of the receiving party. Address is required in the case\r\nof SWIFT accounts, but not if the account is local.",
        "operationId": "SendToBank",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToBankRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToBankRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendToBankRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToBankDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToBankDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToBankDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/addbankaccount": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Add an existing bank account to the PMIs of the user. \r\nThe required parameters depend on the type of bank account of the receiving party. Address is required in the case\r\nof SWIFT accounts, but not if the account is local.",
        "operationId": "AddBankAccount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBankAccountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBankAccountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddBankAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddBankAccountDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddBankAccountDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddBankAccountDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2024": {
                    "summary": "Error-2024",
                    "value": {
                      "code": 2024,
                      "message": "Bank account name required",
                      "statusCode": 400
                    }
                  },
                  "Error-2023": {
                    "summary": "Error-2023",
                    "value": {
                      "code": 2023,
                      "message": "Bank account number invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2000": {
                    "summary": "Error-2000",
                    "value": {
                      "code": 2000,
                      "message": "No currency provided for payment method",
                      "statusCode": 400
                    }
                  },
                  "Error-2502": {
                    "summary": "Error-2502",
                    "value": {
                      "code": 2502,
                      "message": "Invalid PaymentMethod Color Provided",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2506": {
                    "summary": "Error-2506",
                    "value": {
                      "code": 2506,
                      "message": "Can not create payment method instance with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2503": {
                    "summary": "Error-2503",
                    "value": {
                      "code": 2503,
                      "message": "Name Already Exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2501": {
                    "summary": "Error-2501",
                    "value": {
                      "code": 2501,
                      "message": "Selected Payment Method not available with request currency",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/setmainbankaccount": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Set the main bank account for this user to use for incoming(!) payments.",
        "operationId": "SetMainBankAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetMainBankAccountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetMainBankAccountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetMainBankAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetMainBankAccountDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetMainBankAccountDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetMainBankAccountDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2024": {
                    "summary": "Error-2024",
                    "value": {
                      "code": 2024,
                      "message": "Bank account name required",
                      "statusCode": 400
                    }
                  },
                  "Error-2023": {
                    "summary": "Error-2023",
                    "value": {
                      "code": 2023,
                      "message": "Bank account number invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2000": {
                    "summary": "Error-2000",
                    "value": {
                      "code": 2000,
                      "message": "No currency provided for payment method",
                      "statusCode": 400
                    }
                  },
                  "Error-2502": {
                    "summary": "Error-2502",
                    "value": {
                      "code": 2502,
                      "message": "Invalid PaymentMethod Color Provided",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2506": {
                    "summary": "Error-2506",
                    "value": {
                      "code": 2506,
                      "message": "Can not create payment method instance with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2503": {
                    "summary": "Error-2503",
                    "value": {
                      "code": 2503,
                      "message": "Name Already Exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2501": {
                    "summary": "Error-2501",
                    "value": {
                      "code": 2501,
                      "message": "Selected Payment Method not available with request currency",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/addcard": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "AddCard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddCardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddCardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddCardDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2015": {
                    "summary": "Error-2015",
                    "value": {
                      "code": 2015,
                      "message": "Invalid CVV code provided",
                      "statusCode": 400
                    }
                  },
                  "Error-2025": {
                    "summary": "Error-2025",
                    "value": {
                      "code": 2025,
                      "message": "Name on card required",
                      "statusCode": 400
                    }
                  },
                  "Error-2016": {
                    "summary": "Error-2016",
                    "value": {
                      "code": 2016,
                      "message": "This card is already expired",
                      "statusCode": 400
                    }
                  },
                  "Error-2014": {
                    "summary": "Error-2014",
                    "value": {
                      "code": 2014,
                      "message": "Invalid PAN provided",
                      "statusCode": 400
                    }
                  },
                  "Error-2000": {
                    "summary": "Error-2000",
                    "value": {
                      "code": 2000,
                      "message": "No currency provided for payment method",
                      "statusCode": 400
                    }
                  },
                  "Error-2502": {
                    "summary": "Error-2502",
                    "value": {
                      "code": 2502,
                      "message": "Invalid PaymentMethod Color Provided",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getavailablecrypto": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get all available cryptocurrency/blockchain methods that are available to this user. The response contains all information needed to \r\nadd payment methods to the wallet of the user.",
        "operationId": "GetAvailableCrypto",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAvailableCryptoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAvailableCryptoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAvailableCryptoDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2500": {
                    "summary": "Error-2500",
                    "value": {
                      "code": 2500,
                      "message": "No Crypto Access",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/addcustodiancrypto": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Adds an internal custodian account; this acccount is held with a 3rd party provider (including SimSecSecure) for storing user crypto currency\r\namounts. The user does not have the private key for this account which allows security for TFX over the funds.",
        "operationId": "AddCustodianCrypto",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCustodianCryptoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCustodianCryptoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddCustodianCryptoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddCustodianCryptoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddCustodianCryptoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddCustodianCryptoDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2000": {
                    "summary": "Error-2000",
                    "value": {
                      "code": 2000,
                      "message": "No currency provided for payment method",
                      "statusCode": 400
                    }
                  },
                  "Error-2502": {
                    "summary": "Error-2502",
                    "value": {
                      "code": 2502,
                      "message": "Invalid PaymentMethod Color Provided",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2506": {
                    "summary": "Error-2506",
                    "value": {
                      "code": 2506,
                      "message": "Can not create payment method instance with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2503": {
                    "summary": "Error-2503",
                    "value": {
                      "code": 2503,
                      "message": "Name Already Exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2501": {
                    "summary": "Error-2501",
                    "value": {
                      "code": 2501,
                      "message": "Selected Payment Method not available with request currency",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/sendtocrypto": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Send funds to an external crypto address. The user must ensure the address is correct or funds will be lost.",
        "operationId": "SendToCrypto",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToCryptoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToCryptoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendToCryptoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToCryptoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToCryptoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToCryptoDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/exchangepayment": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Create an exchange, in your own account, from PMI to PMI. The conversion from currency to currency will be automatic and fees will be added automatically.",
        "operationId": "ExchangePayment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangePaymentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangePaymentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExchangePaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessExchangePaymentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessExchangePaymentDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessExchangePaymentDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2519": {
                    "summary": "Error-2519",
                    "value": {
                      "code": 2519,
                      "message": "Sticker transaction package Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2521": {
                    "summary": "Error-2521",
                    "value": {
                      "code": 2521,
                      "message": "Error verify sticker transaction message",
                      "statusCode": 400
                    }
                  },
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-2018": {
                    "summary": "Error-2018",
                    "value": {
                      "code": 2018,
                      "message": "Access denied",
                      "statusCode": 400
                    }
                  },
                  "Error-2001": {
                    "summary": "Error-2001",
                    "value": {
                      "code": 2001,
                      "message": "This payment method cannot be exchanged",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getexchangerate": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get the exchange rate for the provided currency conversion, including the amount calculation.",
        "operationId": "GetExchangeRate",
        "parameters": [
          {
            "name": "fromCurrencyId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "toCurrencyId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "method",
            "in": "query",
            "description": "Can be internal, exchange, bank, card",
            "schema": {
              "type": "string",
              "default": "exchange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetExchangeRateDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetExchangeRateDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetExchangeRateDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2008": {
                    "summary": "Error-2008",
                    "value": {
                      "code": 2008,
                      "message": "Cannot find currency pair",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 500
                    }
                  },
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2508": {
                    "summary": "Error-2508",
                    "value": {
                      "code": 2508,
                      "message": "Currency not supported",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getconversionrates": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get conversion rates",
        "operationId": "GetConversionRates",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetConversionRatesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetConversionRatesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetConversionRatesDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getavailablepaymentmethods": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get the available methods for the user in the region of the user.",
        "operationId": "GetAvailablePaymentMethods",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAvailablePaymentMethodsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAvailablePaymentMethodsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAvailablePaymentMethodsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getcurrencytypevalues": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get the avialable types for currencies",
        "operationId": "GetCurrencyTypeValues",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyTypeValuesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyTypeValuesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCurrencyTypeValuesDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/lockpaymentmethod": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Lock payment method instance",
        "operationId": "LockPaymentMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockPaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LockPaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LockPaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLockPaymentMethodDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLockPaymentMethodDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessLockPaymentMethodDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/unlockpaymentmethod": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Unlock payment method instance",
        "operationId": "UnlockPaymentMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockPaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockPaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockPaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUnlockPaymentMethodDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUnlockPaymentMethodDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessUnlockPaymentMethodDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/editpaymentmethod": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Edit payment method",
        "operationId": "EditPaymentMethod",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EditPaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditPaymentMethodDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditPaymentMethodDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessEditPaymentMethodDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-2518": {
                    "summary": "Error-2518",
                    "value": {
                      "code": 2518,
                      "message": "Wallet not exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2503": {
                    "summary": "Error-2503",
                    "value": {
                      "code": 2503,
                      "message": "Name Already Exists",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getpaymentmethods": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get payment methods",
        "operationId": "GetPaymentMethods",
        "parameters": [
          {
            "name": "baseType",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "walletName",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Main"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getpaymentmethod": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get the payment method for this user",
        "operationId": "GetPaymentMethod",
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/deletepaymentmethod": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Use to delete payment Method",
        "operationId": "DeletePaymentMethod",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePaymentMethodRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePaymentMethodRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePaymentMethodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeletePaymentMethodDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeletePaymentMethodDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeletePaymentMethodDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getbalance": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get payment method instance balance",
        "operationId": "GetBalance",
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "query",
            "description": "payment method instance id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetBalanceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetBalanceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetBalanceDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2005": {
                    "summary": "Error-2005",
                    "value": {
                      "code": 2005,
                      "message": "This payment method does not support a requestable balance",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/setpreference": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Set payment method instance setting",
        "operationId": "SetPreference",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferenceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferenceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPreferenceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPaymentMethodInstanceSettingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPaymentMethodInstanceSettingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSetPaymentMethodInstanceSettingResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getpreferences": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get payment method instance settings",
        "operationId": "GetPreferences",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodInstanceSettingResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodInstanceSettingResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetPaymentMethodInstanceSettingResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/addprepaidaccount": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Add prepaid account",
        "operationId": "AddPrepaidAccount",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPrepaidAccountRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPrepaidAccountRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddPrepaidAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddPrepaidAccountDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddPrepaidAccountDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessAddPrepaidAccountDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2000": {
                    "summary": "Error-2000",
                    "value": {
                      "code": 2000,
                      "message": "No currency provided for payment method",
                      "statusCode": 400
                    }
                  },
                  "Error-2502": {
                    "summary": "Error-2502",
                    "value": {
                      "code": 2502,
                      "message": "Invalid PaymentMethod Color Provided",
                      "statusCode": 400
                    }
                  },
                  "Error-2506": {
                    "summary": "Error-2506",
                    "value": {
                      "code": 2506,
                      "message": "Can not create payment method instance with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2503": {
                    "summary": "Error-2503",
                    "value": {
                      "code": 2503,
                      "message": "Name Already Exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2501": {
                    "summary": "Error-2501",
                    "value": {
                      "code": 2501,
                      "message": "Selected Payment Method not available with request currency",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  },
                  "Error-2004": {
                    "summary": "Error-2004",
                    "value": {
                      "code": 2004,
                      "message": "Currency not supported for prepaid account",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/requestfundsvialink": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Request funds via link``",
        "operationId": "RequestFundsViaLink",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundsViaLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundsViaLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundsViaLinkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundsViaLinkDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundsViaLinkDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundsViaLinkDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getrequestfundsvialink": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get all requested funds for current user",
        "operationId": "GetRequestFundsViaLink",
        "parameters": [
          {
            "name": "requestFundId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsViaLinkDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsViaLinkDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsViaLinkDto"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2516": {
                    "summary": "Error-2516",
                    "value": {
                      "code": 2516,
                      "message": "Request fund via link not found",
                      "statusCode": 404
                    }
                  },
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/payrequestfundvialink": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "pay request fund via link",
        "operationId": "PayRequestFundViaLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayRequestFundViaLinkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayRequestFundViaLinkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayRequestFundViaLinkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayRequestFundViaLinkDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayRequestFundViaLinkDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayRequestFundViaLinkDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2519": {
                    "summary": "Error-2519",
                    "value": {
                      "code": 2519,
                      "message": "Sticker transaction package Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2521": {
                    "summary": "Error-2521",
                    "value": {
                      "code": 2521,
                      "message": "Error verify sticker transaction message",
                      "statusCode": 400
                    }
                  },
                  "Error-2516": {
                    "summary": "Error-2516",
                    "value": {
                      "code": 2516,
                      "message": "Request fund via link not found",
                      "statusCode": 400
                    }
                  },
                  "Error-1102": {
                    "summary": "Error-1102",
                    "value": {
                      "code": 1102,
                      "message": "User account is inactive",
                      "statusCode": 400
                    }
                  },
                  "Error-1017": {
                    "summary": "Error-1017",
                    "value": {
                      "code": 1017,
                      "message": "User is already a contact",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/requestfundtouser": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Request fund from user",
        "operationId": "RequestFundToUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundToUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundToUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundToUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundToUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundToUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundToUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2509": {
                    "summary": "Error-2509",
                    "value": {
                      "code": 2509,
                      "message": "Description required",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2508": {
                    "summary": "Error-2508",
                    "value": {
                      "code": 2508,
                      "message": "Currency not supported",
                      "statusCode": 404
                    }
                  },
                  "Error-1027": {
                    "summary": "Error-1027",
                    "value": {
                      "code": 1027,
                      "message": "User not belong current user's contact",
                      "statusCode": 404
                    }
                  },
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getrequestfundbyid": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get request fund send to current user",
        "operationId": "GetRequestFundById",
        "parameters": [
          {
            "name": "requestFundId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundByIdDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundByIdDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundByIdDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2511": {
                    "summary": "Error-2511",
                    "value": {
                      "code": 2511,
                      "message": "Request user fund not exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2514": {
                    "summary": "Error-2514",
                    "value": {
                      "code": 2514,
                      "message": "Request user fund not belong current user ",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getrequestfundtouserbyid": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get request fund send from current user by request fund id",
        "operationId": "GetRequestFundToUserById",
        "parameters": [
          {
            "name": "requestFundId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundToUserByIdDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundToUserByIdDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundToUserByIdDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2511": {
                    "summary": "Error-2511",
                    "value": {
                      "code": 2511,
                      "message": "Request user fund not exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2514": {
                    "summary": "Error-2514",
                    "value": {
                      "code": 2514,
                      "message": "Request user fund not belong current user ",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getrequestfundsfromusers": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get all requested funds for current user",
        "operationId": "GetRequestFundsFromUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsFromUsersDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsFromUsersDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsFromUsersDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getrequestfundstousers": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get all requested funds from current user to other users",
        "operationId": "GetRequestFundsToUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsToUsersDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsToUsersDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRequestFundsToUsersDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/declineuserfundrequest": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "current user decline fund request",
        "operationId": "DeclineUserFundRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineUserFundRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineUserFundRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineUserFundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeclineUserFundRequestDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeclineUserFundRequestDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeclineUserFundRequestDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2511": {
                    "summary": "Error-2511",
                    "value": {
                      "code": 2511,
                      "message": "Request user fund not exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2514": {
                    "summary": "Error-2514",
                    "value": {
                      "code": 2514,
                      "message": "Request user fund not belong current user ",
                      "statusCode": 400
                    }
                  },
                  "Error-2512": {
                    "summary": "Error-2512",
                    "value": {
                      "code": 2512,
                      "message": "User fund request already declined",
                      "statusCode": 400
                    }
                  },
                  "Error-2513": {
                    "summary": "Error-2513",
                    "value": {
                      "code": 2513,
                      "message": "User fund request already paid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/payuserfundrequest": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "current user pay for user fund request",
        "operationId": "PayUserFundRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayUserFundRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayUserFundRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayUserFundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayUserFundRequestDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayUserFundRequestDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayUserFundRequestDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2519": {
                    "summary": "Error-2519",
                    "value": {
                      "code": 2519,
                      "message": "Sticker transaction package Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2521": {
                    "summary": "Error-2521",
                    "value": {
                      "code": 2521,
                      "message": "Error verify sticker transaction message",
                      "statusCode": 400
                    }
                  },
                  "Error-2511": {
                    "summary": "Error-2511",
                    "value": {
                      "code": 2511,
                      "message": "Request user fund not exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2514": {
                    "summary": "Error-2514",
                    "value": {
                      "code": 2514,
                      "message": "Request user fund not belong current user ",
                      "statusCode": 400
                    }
                  },
                  "Error-2513": {
                    "summary": "Error-2513",
                    "value": {
                      "code": 2513,
                      "message": "User fund request already paid",
                      "statusCode": 400
                    }
                  },
                  "Error-1102": {
                    "summary": "Error-1102",
                    "value": {
                      "code": 1102,
                      "message": "User account is inactive",
                      "statusCode": 400
                    }
                  },
                  "Error-1017": {
                    "summary": "Error-1017",
                    "value": {
                      "code": 1017,
                      "message": "User is already a contact",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-2517": {
                    "summary": "Error-2517",
                    "value": {
                      "code": 2517,
                      "message": "Current user cannot send money to himself",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/requestfundtouserbychat": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "RequestFundToUserByChat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundToUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundToUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RequestFundToUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundToUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundToUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRequestFundToUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2509": {
                    "summary": "Error-2509",
                    "value": {
                      "code": 2509,
                      "message": "Description required",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-2508": {
                    "summary": "Error-2508",
                    "value": {
                      "code": 2508,
                      "message": "Currency not supported",
                      "statusCode": 404
                    }
                  },
                  "Error-1027": {
                    "summary": "Error-1027",
                    "value": {
                      "code": 1027,
                      "message": "User not belong current user's contact",
                      "statusCode": 404
                    }
                  },
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/declineuserfundrequestbychat": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "DeclineUserFundRequestByChat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineUserFundRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineUserFundRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineUserFundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeclineUserFundRequestDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeclineUserFundRequestDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeclineUserFundRequestDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2511": {
                    "summary": "Error-2511",
                    "value": {
                      "code": 2511,
                      "message": "Request user fund not exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2514": {
                    "summary": "Error-2514",
                    "value": {
                      "code": 2514,
                      "message": "Request user fund not belong current user ",
                      "statusCode": 400
                    }
                  },
                  "Error-2512": {
                    "summary": "Error-2512",
                    "value": {
                      "code": 2512,
                      "message": "User fund request already declined",
                      "statusCode": 400
                    }
                  },
                  "Error-2513": {
                    "summary": "Error-2513",
                    "value": {
                      "code": 2513,
                      "message": "User fund request already paid",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/payuserfundrequestbychat": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "PayUserFundRequestByChat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayUserFundRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PayUserFundRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PayUserFundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayUserFundRequestDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayUserFundRequestDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPayUserFundRequestDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2519": {
                    "summary": "Error-2519",
                    "value": {
                      "code": 2519,
                      "message": "Sticker transaction package Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2521": {
                    "summary": "Error-2521",
                    "value": {
                      "code": 2521,
                      "message": "Error verify sticker transaction message",
                      "statusCode": 400
                    }
                  },
                  "Error-2511": {
                    "summary": "Error-2511",
                    "value": {
                      "code": 2511,
                      "message": "Request user fund not exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2514": {
                    "summary": "Error-2514",
                    "value": {
                      "code": 2514,
                      "message": "Request user fund not belong current user ",
                      "statusCode": 400
                    }
                  },
                  "Error-2513": {
                    "summary": "Error-2513",
                    "value": {
                      "code": 2513,
                      "message": "User fund request already paid",
                      "statusCode": 400
                    }
                  },
                  "Error-1102": {
                    "summary": "Error-1102",
                    "value": {
                      "code": 1102,
                      "message": "User account is inactive",
                      "statusCode": 400
                    }
                  },
                  "Error-1017": {
                    "summary": "Error-1017",
                    "value": {
                      "code": 1017,
                      "message": "User is already a contact",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-2517": {
                    "summary": "Error-2517",
                    "value": {
                      "code": 2517,
                      "message": "Current user cannot send money to himself",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/gettransactions": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get transaction for payment method instance",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "name": "paymentMethodId",
            "in": "query",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "itemCount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 25
            }
          },
          {
            "name": "beginDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetTransactionsDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/sendtouser": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "operationId": "SendToUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendToUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2519": {
                    "summary": "Error-2519",
                    "value": {
                      "code": 2519,
                      "message": "Sticker transaction package Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2521": {
                    "summary": "Error-2521",
                    "value": {
                      "code": 2521,
                      "message": "Error verify sticker transaction message",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-2517": {
                    "summary": "Error-2517",
                    "value": {
                      "code": 2517,
                      "message": "Current user cannot send money to himself",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-2004": {
                    "summary": "Error-2004",
                    "value": {
                      "code": 2004,
                      "message": "Currency not supported for prepaid account",
                      "statusCode": 400
                    }
                  },
                  "Error-2000": {
                    "summary": "Error-2000",
                    "value": {
                      "code": 2000,
                      "message": "No currency provided for payment method",
                      "statusCode": 400
                    }
                  },
                  "Error-2502": {
                    "summary": "Error-2502",
                    "value": {
                      "code": 2502,
                      "message": "Invalid PaymentMethod Color Provided",
                      "statusCode": 400
                    }
                  },
                  "Error-2506": {
                    "summary": "Error-2506",
                    "value": {
                      "code": 2506,
                      "message": "Can not create payment method instance with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2503": {
                    "summary": "Error-2503",
                    "value": {
                      "code": 2503,
                      "message": "Name Already Exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2501": {
                    "summary": "Error-2501",
                    "value": {
                      "code": 2501,
                      "message": "Selected Payment Method not available with request currency",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/sendtouserbychat": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Send To User in chat page",
        "operationId": "SendToUserByChat",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendToUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendToUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessSendToUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-2519": {
                    "summary": "Error-2519",
                    "value": {
                      "code": 2519,
                      "message": "Sticker transaction package Invalid",
                      "statusCode": 400
                    }
                  },
                  "Error-2520": {
                    "summary": "Error-2520",
                    "value": {
                      "code": 2520,
                      "message": "Sticker not activated yet",
                      "statusCode": 400
                    }
                  },
                  "Error-2521": {
                    "summary": "Error-2521",
                    "value": {
                      "code": 2521,
                      "message": "Error verify sticker transaction message",
                      "statusCode": 400
                    }
                  },
                  "Error-2507": {
                    "summary": "Error-2507",
                    "value": {
                      "code": 2507,
                      "message": "Currency required",
                      "statusCode": 400
                    }
                  },
                  "Error-2510": {
                    "summary": "Error-2510",
                    "value": {
                      "code": 2510,
                      "message": "Amount cannot be less than or equal to 0",
                      "statusCode": 400
                    }
                  },
                  "Error-2517": {
                    "summary": "Error-2517",
                    "value": {
                      "code": 2517,
                      "message": "Current user cannot send money to himself",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2100": {
                    "summary": "Error-2100",
                    "value": {
                      "code": 2100,
                      "message": "Payment method does not exist",
                      "statusCode": 400
                    }
                  },
                  "Error-2004": {
                    "summary": "Error-2004",
                    "value": {
                      "code": 2004,
                      "message": "Currency not supported for prepaid account",
                      "statusCode": 400
                    }
                  },
                  "Error-2000": {
                    "summary": "Error-2000",
                    "value": {
                      "code": 2000,
                      "message": "No currency provided for payment method",
                      "statusCode": 400
                    }
                  },
                  "Error-2502": {
                    "summary": "Error-2502",
                    "value": {
                      "code": 2502,
                      "message": "Invalid PaymentMethod Color Provided",
                      "statusCode": 400
                    }
                  },
                  "Error-2506": {
                    "summary": "Error-2506",
                    "value": {
                      "code": 2506,
                      "message": "Can not create payment method instance with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-2503": {
                    "summary": "Error-2503",
                    "value": {
                      "code": 2503,
                      "message": "Name Already Exists",
                      "statusCode": 400
                    }
                  },
                  "Error-2501": {
                    "summary": "Error-2501",
                    "value": {
                      "code": 2501,
                      "message": "Selected Payment Method not available with request currency",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/deleteuser": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Delete current user",
        "operationId": "DeleteUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteUserDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getwallet": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get wallet info for a specific user and wallet",
        "operationId": "GetWallet",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Main"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetWalletDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetWalletDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetWalletDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getwallets": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get all wallets for a specific user",
        "operationId": "GetWallets",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListWalletDtoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListWalletDtoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessListWalletDtoResponse"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getversion": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get app version",
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVersionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVersionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetVersionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/wallet/getdashboard": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Get dashboard",
        "operationId": "GetDashboard",
        "parameters": [
          {
            "name": "wallet",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": "Main"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetDashboardDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetDashboardDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetDashboardDto"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1000": {
                    "summary": "Error-1000",
                    "value": {
                      "code": 1000,
                      "message": "Invalid Session",
                      "statusCode": 400
                    }
                  },
                  "Error-1013": {
                    "summary": "Error-1013",
                    "value": {
                      "code": 1013,
                      "message": "Invalid User",
                      "statusCode": 400
                    }
                  },
                  "Error-2505": {
                    "summary": "Error-2505",
                    "value": {
                      "code": 2505,
                      "message": "Can not create wallet with name start with special char '_'",
                      "statusCode": 400
                    }
                  },
                  "Error-103": {
                    "summary": "Error-103",
                    "value": {
                      "code": 103,
                      "message": "The number of records exceeds the limit of {0} records",
                      "statusCode": 400
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-7000": {
                    "summary": "Error-7000",
                    "value": {
                      "code": 7000,
                      "message": "Unknown Error",
                      "statusCode": 500
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1300": {
                    "summary": "Error-1300",
                    "value": {
                      "code": 1300,
                      "message": "User Not Logged On",
                      "statusCode": 401
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ErrorResponseDto",
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "Error-1024": {
                    "summary": "Error-1024",
                    "value": {
                      "code": 1024,
                      "message": "User does not exist",
                      "statusCode": 404
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessValues": {
        "enum": [
          "All",
          "Client",
          "Partner"
        ],
        "type": "string"
      },
      "ActivateRequest": {
        "required": [
          "serial"
        ],
        "type": "object",
        "properties": {
          "serial": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddBankAccountRequest": {
        "required": [
          "currencyId",
          "accountName",
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "swiftbsb": {
            "type": "string",
            "nullable": true
          },
          "wallet": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AddCardRequest": {
        "required": [
          "currencyId",
          "nameOnCard",
          "pan",
          "expiry",
          "cvv"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "nameOnCard": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "cvv": {
            "type": "string"
          },
          "wallet": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AddContactRequest": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "nickName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddCustodianCryptoRequest": {
        "required": [
          "currencyId"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "wallet": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AddDeviceRequest": {
        "required": [
          "uUID",
          "deviceToken"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "deviceToken": {
            "type": "string"
          },
          "deviceType": {
            "type": "string",
            "nullable": true
          },
          "system": {
            "type": "string",
            "nullable": true
          },
          "systemVersion": {
            "type": "string",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "nullable": true
          },
          "model": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddDeviceResultDto": {
        "required": [
          "deviceId"
        ],
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AddMerchantRequest": {
        "required": [
          "firstName",
          "lastName",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AddMerchantResultDto": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AddPrepaidAccountRequest": {
        "required": [
          "currencyId"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "wallet": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "street2": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "houseNumberAddition": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "zipcode": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "state": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "country": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "isFloatBankAddress": {
            "type": "boolean"
          },
          "venue": {
            "$ref": "#/components/schemas/Venue"
          },
          "bankPaymentMethodInstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodInstance"
            },
            "nullable": true
          },
          "beneficiaryPaymentMethodInstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodInstance"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressDto": {
        "required": [
          "street",
          "country",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "street": {
            "type": "string"
          },
          "street2": {
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "nullable": true
          },
          "houseNumberAddition": {
            "type": "string",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AddVenueRequest": {
        "required": [
          "name",
          "address",
          "country",
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "merchantId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddVenueResultDto": {
        "required": [
          "venueId"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AllConversions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "baseCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "baseCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "targetCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "targetCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "rate": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/StatusValues"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "limitType": {
            "$ref": "#/components/schemas/LimitTypeValues"
          },
          "key": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "access": {
            "$ref": "#/components/schemas/AccessValues"
          },
          "role": {
            "$ref": "#/components/schemas/RoleValues"
          },
          "applicationInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationInstance"
          }
        },
        "additionalProperties": false
      },
      "ApplicationInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AppTypeValues"
          },
          "apiKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppTypeValues": {
        "enum": [
          "Wallet",
          "Tipsee"
        ],
        "type": "string"
      },
      "AuditType": {
        "enum": [
          "Create",
          "Update",
          "Delete",
          "Read"
        ],
        "type": "string"
      },
      "AuthorizeBodyRequest": {
        "type": "object",
        "properties": {
          "interface": {
            "type": "string",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "nullable": true
          },
          "payinfo": {
            "$ref": "#/components/schemas/PayInfoRequestDto"
          },
          "recurring": {
            "$ref": "#/components/schemas/RecurringRequestDto"
          }
        },
        "additionalProperties": false
      },
      "BankPaymentTypeValues": {
        "enum": [
          "Sepa",
          "Swift"
        ],
        "type": "string"
      },
      "BaseSuccessResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "CancelPreAuthPhysicalWalletRequest": {
        "required": [
          "physicalWalletId",
          "functionNumber"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CanLoginResultDto": {
        "required": [
          "canLogin"
        ],
        "type": "object",
        "properties": {
          "canLogin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ChargeCardRequest": {
        "required": [
          "cardId",
          "amount"
        ],
        "type": "object",
        "properties": {
          "cardId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChatMessageTypeValues": {
        "enum": [
          "Normal",
          "RequestFund",
          "RequestFundPaid",
          "RequestFundDeclined",
          "SendToUser"
        ],
        "type": "string"
      },
      "CheckSessionActiveResultDto": {
        "required": [
          "isSessionActive"
        ],
        "type": "object",
        "properties": {
          "isSessionActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ClaimPendingTipsRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClearPhysicalWalletPaymentMethodRequest": {
        "required": [
          "physicalWalletId",
          "functionNumber"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ConfigurePreAuthRequest": {
        "required": [
          "physicalWalletId",
          "functionNumber",
          "startedOn",
          "duration",
          "maximumAmount",
          "paymentTypes",
          "multiUse"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "startedOn": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "maximumAmount": {
            "type": "number",
            "format": "double"
          },
          "paymentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletPaymentType"
            }
          },
          "multiUse": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConfigurePreAuthResultDto": {
        "required": [
          "physicalWalletPreAuthId"
        ],
        "type": "object",
        "properties": {
          "physicalWalletPreAuthId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ContentResult": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CountryDto": {
        "required": [
          "isoName",
          "fullName"
        ],
        "type": "object",
        "properties": {
          "isoName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateCurrencyRequest": {
        "required": [
          "name",
          "symbol",
          "type",
          "precision",
          "format"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CurrencyTypeValues"
          },
          "precision": {
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateCurrencyResultDto": {
        "required": [
          "currencyId"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateFeeDefinitionDto": {
        "required": [
          "fromCurrencyId",
          "toCurrencyId",
          "fromPaymentMethodType",
          "toPaymentMethodType",
          "transactionType",
          "paymentType"
        ],
        "type": "object",
        "properties": {
          "fromCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "toCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "fromPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "toPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentTypeValues"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateFeeDefinitionValueDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateFeeDefinitionRequest": {
        "required": [
          "feeDefinition"
        ],
        "type": "object",
        "properties": {
          "feeDefinition": {
            "$ref": "#/components/schemas/CreateFeeDefinitionDto"
          }
        },
        "additionalProperties": false
      },
      "CreateFeeDefinitionResultDto": {
        "required": [
          "feeDefinitionId"
        ],
        "type": "object",
        "properties": {
          "feeDefinitionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateFeeDefinitionValueCountryDto": {
        "type": "object",
        "properties": {
          "fromCountryIso": {
            "type": "string",
            "nullable": true
          },
          "toCountryIso": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateFeeDefinitionValueDto": {
        "required": [
          "description",
          "amount",
          "currencyId",
          "type",
          "unit",
          "paidBy",
          "isChoice"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/FeeTypeValues"
          },
          "unit": {
            "$ref": "#/components/schemas/FeeUnitValues"
          },
          "paidBy": {
            "$ref": "#/components/schemas/FeePaidByValues"
          },
          "isChoice": {
            "type": "boolean"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateFeeDefinitionValueCountryDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePayeeRequestDto": {
        "type": "object",
        "properties": {
          "location_type": {
            "type": "string",
            "nullable": true
          },
          "payee_name": {
            "type": "string",
            "nullable": true
          },
          "account_no": {
            "type": "string",
            "nullable": true
          },
          "sort_code": {
            "type": "string",
            "nullable": true
          },
          "account_type": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "currencyType": {
            "type": "string",
            "nullable": true
          },
          "recipientAccountType": {
            "type": "string",
            "nullable": true
          },
          "recipientBicSwift": {
            "type": "string",
            "nullable": true
          },
          "recipientBankName": {
            "type": "string",
            "nullable": true
          },
          "recipientBankAddress": {
            "$ref": "#/components/schemas/RecipientBankAddressDto"
          },
          "recipientAddress": {
            "$ref": "#/components/schemas/RecipientAddress"
          }
        },
        "additionalProperties": false
      },
      "CreatePaymentMethodRequest": {
        "required": [
          "name",
          "currencyId",
          "minimalTransferOutAmount",
          "minimalExchangeAmount"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "canSend": {
            "type": "boolean"
          },
          "canReceive": {
            "type": "boolean"
          },
          "canExchange": {
            "type": "boolean"
          },
          "hasBalance": {
            "type": "boolean"
          },
          "canBank": {
            "type": "boolean"
          },
          "canLock": {
            "type": "boolean"
          },
          "minimalTransferOutAmount": {
            "type": "number",
            "format": "double"
          },
          "minimalExchangeAmount": {
            "type": "number",
            "format": "double"
          },
          "subCurrencyName": {
            "type": "string",
            "nullable": true
          },
          "subCurrencySymbol": {
            "type": "string",
            "nullable": true
          },
          "subCurrencyValue": {
            "type": "number",
            "format": "double"
          },
          "regionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreatePaymentMethodResultDto": {
        "required": [
          "paymentMethodId"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreatePhysicalWalletPlanRequest": {
        "required": [
          "name",
          "price",
          "currencyId",
          "period",
          "physicalWalletTierId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "period": {
            "$ref": "#/components/schemas/PhysicalWalletPlanPeriodValues"
          },
          "physicalWalletTierId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreatePhysicalWalletPlanResultDto": {
        "required": [
          "physicalWalletPlanId"
        ],
        "type": "object",
        "properties": {
          "physicalWalletPlanId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreatePhysicalWalletRequest": {
        "required": [
          "firstname",
          "lastname",
          "address",
          "postCode",
          "city",
          "country",
          "mobileNumber",
          "email",
          "physicalWalletTypeId",
          "physicalWalletPlanId"
        ],
        "type": "object",
        "properties": {
          "firstname": {
            "type": "string"
          },
          "middlename": {
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "postCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "physicalWalletTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "physicalWalletPlanId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreatePhysicalWalletResultDto": {
        "required": [
          "physicalWalletId"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreatePhysicalWalletTierRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ordering": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreatePhysicalWalletTierResultDto": {
        "required": [
          "physicalWalletTierId"
        ],
        "type": "object",
        "properties": {
          "physicalWalletTierId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreatePhysicalWalletTypeResultDto": {
        "required": [
          "physicalWalletTypeId"
        ],
        "type": "object",
        "properties": {
          "physicalWalletTypeId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateRegionRequest": {
        "required": [
          "name",
          "isoName",
          "primaryCurrencyId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isoName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "primaryCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateRegionResultDto": {
        "required": [
          "regionId"
        ],
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateRequestUserFundResultDto": {
        "required": [
          "requestUserFundId"
        ],
        "type": "object",
        "properties": {
          "requestUserFundId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateSessionRequest": {
        "required": [
          "apiKey"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateSessionResultDto": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateWalletTypeRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateWalletTypeResultDto": {
        "required": [
          "walletTypeId"
        ],
        "type": "object",
        "properties": {
          "walletTypeId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Currency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "symbol": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CurrencyTypeValues"
          },
          "precision": {
            "maxLength": 255,
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "baseAllConVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllConversions"
            },
            "nullable": true
          },
          "targetAllConVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllConversions"
            },
            "nullable": true
          },
          "fromFeeDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinition"
            },
            "nullable": true
          },
          "toFeeDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinition"
            },
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodCurrency"
            },
            "nullable": true
          },
          "externalServiceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyExternalServiceSetting"
            },
            "nullable": true
          },
          "fromTransactionLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLine"
            },
            "nullable": true
          },
          "toTransactionLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLine"
            },
            "nullable": true
          },
          "physicalWalletPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletPlan"
            },
            "nullable": true
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            },
            "nullable": true
          },
          "physicalWalletTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletType"
            },
            "nullable": true
          },
          "feeDefinitionValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinitionValue"
            },
            "nullable": true
          },
          "requestUserFunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestUserFund"
            },
            "nullable": true
          },
          "requestAnonymousFunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestAnonymousFund"
            },
            "nullable": true
          },
          "systemSettings": {
            "$ref": "#/components/schemas/SystemSettings"
          }
        },
        "additionalProperties": false
      },
      "CurrencyDto": {
        "required": [
          "name",
          "symbol",
          "type",
          "precision",
          "format",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/CurrencyTypeValues"
          },
          "precision": {
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CurrencyExternalServiceSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "externalServiceSettingId": {
            "type": "string",
            "format": "uuid"
          },
          "externalServiceSetting": {
            "$ref": "#/components/schemas/ExternalServiceSetting"
          }
        },
        "additionalProperties": false
      },
      "CurrencyTypeValues": {
        "enum": [
          "Fiat",
          "Crypto",
          "Loyalty",
          "Stocks"
        ],
        "type": "string"
      },
      "DashboardInfoDto": {
        "type": "object",
        "properties": {
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodInstanceDto"
            },
            "nullable": true
          },
          "selectedMethod": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "firstPaymentMethodTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTransactionDto"
            },
            "nullable": true
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExchangeRateDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeclineUserFundRequest": {
        "required": [
          "requestUserFundId"
        ],
        "type": "object",
        "properties": {
          "requestUserFundId": {
            "type": "string",
            "format": "uuid"
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          }
        },
        "additionalProperties": false
      },
      "DeepKycDto": {
        "required": [
          "level",
          "documentType",
          "status",
          "userId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "level": {
            "$ref": "#/components/schemas/KycLevelValues"
          },
          "documentType": {
            "$ref": "#/components/schemas/KycDocumentTypeValues"
          },
          "frontSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "backSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "frontFaceImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfAddressImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfIncomeImageUrl": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/KycStatusValues"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userFullName": {
            "type": "string",
            "nullable": true
          },
          "checkByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checkByUserFullName": {
            "type": "string",
            "nullable": true
          },
          "histories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KycHistoryDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeepPaymentMethodDto": {
        "required": [
          "name",
          "baseType",
          "canSend",
          "canReceive",
          "canExchange",
          "hasBalance",
          "canBank",
          "canLock",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "canSend": {
            "type": "boolean"
          },
          "canReceive": {
            "type": "boolean"
          },
          "canExchange": {
            "type": "boolean"
          },
          "hasBalance": {
            "type": "boolean"
          },
          "canBank": {
            "type": "boolean"
          },
          "canLock": {
            "type": "boolean"
          },
          "riskFactor": {
            "type": "number",
            "format": "double"
          },
          "minimalTransferOutAmount": {
            "type": "number",
            "format": "double"
          },
          "minimalExchangeAmount": {
            "type": "number",
            "format": "double"
          },
          "subCurrencyName": {
            "type": "string",
            "nullable": true
          },
          "subCurrencySymbol": {
            "type": "string",
            "nullable": true
          },
          "subCurrencyValue": {
            "type": "number",
            "format": "double"
          },
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyDto"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeepPhysicalWalletDto": {
        "required": [
          "status",
          "firstname",
          "lastname",
          "mobileNumber",
          "email",
          "dynamicPinEnabled",
          "onlinePayment",
          "contactlessUsage",
          "magstripeUsage",
          "onlinePaymentLimit",
          "contactlessUsageLimit",
          "magstripeUsageLimit",
          "preAuthEnabled",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/PhysicalWalletStatus"
          },
          "firstname": {
            "type": "string"
          },
          "middlename": {
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "type": "string"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "mobileNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "material": {
            "type": "string",
            "nullable": true
          },
          "scheme": {
            "$ref": "#/components/schemas/PhysicalWalletSchemeValues"
          },
          "finish": {
            "type": "string",
            "nullable": true
          },
          "dynamicPinEnabled": {
            "type": "boolean"
          },
          "onlinePayment": {
            "type": "boolean"
          },
          "contactlessUsage": {
            "type": "boolean"
          },
          "magstripeUsage": {
            "type": "boolean"
          },
          "onlinePaymentLimit": {
            "type": "number",
            "format": "double"
          },
          "contactlessUsageLimit": {
            "type": "number",
            "format": "double"
          },
          "magstripeUsageLimit": {
            "type": "number",
            "format": "double"
          },
          "preAuthEnabled": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/PhysicalWalletTypeDto"
          },
          "plan": {
            "$ref": "#/components/schemas/PhysicalWalletPlanDto"
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletPaymentMethodDto"
            },
            "nullable": true
          },
          "preAuthPresentMandatory": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DeepPhysicalWalletPlanDto": {
        "required": [
          "name",
          "price",
          "currencyId",
          "currency",
          "period",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "period": {
            "$ref": "#/components/schemas/PhysicalWalletPlanPeriodValues"
          },
          "tier": {
            "$ref": "#/components/schemas/PhysicalWalletTierDto"
          }
        },
        "additionalProperties": false
      },
      "DeepPhysicalWalletTierDto": {
        "required": [
          "name",
          "ordering",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ordering": {
            "type": "integer",
            "format": "int32"
          },
          "physicalWalletTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletTypeDto"
            },
            "nullable": true
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletPlanDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeepPhysicalWalletTypeDto": {
        "required": [
          "name",
          "hasKeyboard",
          "hasCvvDisplay",
          "hasPinDisplay",
          "hasPanDisplay",
          "hasDynamicCvv",
          "hasDynamicPan",
          "hasDynamicPin",
          "hasDynamicExpiry",
          "physicalAuth",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageLink": {
            "type": "string",
            "nullable": true
          },
          "walletType": {
            "$ref": "#/components/schemas/WalletTypeDto"
          },
          "scheme": {
            "$ref": "#/components/schemas/PhysicalWalletSchemeValues"
          },
          "hasKeyboard": {
            "type": "boolean"
          },
          "hasCvvDisplay": {
            "type": "boolean"
          },
          "hasPinDisplay": {
            "type": "boolean"
          },
          "hasPanDisplay": {
            "type": "boolean"
          },
          "hasDynamicCvv": {
            "type": "boolean"
          },
          "hasDynamicPan": {
            "type": "boolean"
          },
          "hasDynamicPin": {
            "type": "boolean"
          },
          "hasDynamicExpiry": {
            "type": "boolean"
          },
          "physicalAuth": {
            "type": "boolean"
          },
          "material": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "appColor": {
            "type": "string",
            "nullable": true
          },
          "finish": {
            "type": "string",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "costCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "costCurrency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "issuerName": {
            "type": "string",
            "nullable": true
          },
          "preAuthAllEnabled": {
            "type": "boolean"
          },
          "preAuthMultiUseAllAllowed": {
            "type": "boolean"
          },
          "preAuthAllMandatory": {
            "type": "boolean"
          },
          "preAuthMagstripeEnabled": {
            "type": "boolean"
          },
          "preAuthMagstripeMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthMagstripeMandatory": {
            "type": "boolean"
          },
          "preAuthContactlessEnabled": {
            "type": "boolean"
          },
          "preAuthContactlessMandatory": {
            "type": "boolean"
          },
          "preAuthContactlessMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthChipAndSigEnabled": {
            "type": "boolean"
          },
          "preAuthChipAndSigMandatory": {
            "type": "boolean"
          },
          "preAuthChipAndSigMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthChipAndPinEnabled": {
            "type": "boolean"
          },
          "preAuthChipAndPinMandatory": {
            "type": "boolean"
          },
          "preAuthChipAndPinMinAmount": {
            "type": "number",
            "format": "double"
          },
          "tier": {
            "$ref": "#/components/schemas/PhysicalWalletTierDto"
          }
        },
        "additionalProperties": false
      },
      "DeleteMerchantRequest": {
        "required": [
          "login"
        ],
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DeletePaymentMethodRequest": {
        "required": [
          "paymentMethodId"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "walletName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteUserByAdminRequest": {
        "required": [
          "login"
        ],
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DeleteUserRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "DeleteVenueRequest": {
        "required": [
          "venueId"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeleteWalletsRequest": {
        "required": [
          "login"
        ],
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DestroyPhysicalWalletRequest": {
        "required": [
          "physicalWalletId"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Device": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "uuid": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "token": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "system": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "systemVersion": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "brand": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "model": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DeviceDto": {
        "required": [
          "uUID",
          "token",
          "userId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string"
          },
          "system": {
            "type": "string",
            "nullable": true
          },
          "systemVersion": {
            "type": "string",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "nullable": true
          },
          "model": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "EditContactRequest": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "nickName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EditPaymentMethodRequest": {
        "required": [
          "paymentMethodId"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          },
          "receiveNotifications": {
            "type": "boolean"
          },
          "receiveEmail": {
            "type": "boolean"
          },
          "receiveSMS": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EditVenueRequest": {
        "required": [
          "venueId",
          "name"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadedFile"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExchangePaymentRequest": {
        "required": [
          "fromPaymentMethodId",
          "currencyId",
          "amount",
          "toPaymentMethodId"
        ],
        "type": "object",
        "properties": {
          "fromPaymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "toPaymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          },
          "transactionRequestId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExchangeRateDto": {
        "required": [
          "fee",
          "convertedAmount",
          "rateId",
          "pair",
          "rate"
        ],
        "type": "object",
        "properties": {
          "rateId": {
            "type": "string",
            "format": "uuid"
          },
          "pair": {
            "type": "string"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "fee": {
            "type": "number",
            "format": "double"
          },
          "feeType": {
            "type": "string",
            "nullable": true
          },
          "rateWithFee": {
            "type": "number",
            "format": "double"
          },
          "convertedAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ExcutePaymentRequest": {
        "required": [
          "userId",
          "pOSType",
          "physicalWalletId",
          "functionNumber",
          "amount",
          "currencyId",
          "fee",
          "pan",
          "pin"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "posType": {
            "$ref": "#/components/schemas/PhysicalWalletPOSTypes"
          },
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "fee": {
            "type": "number",
            "format": "double"
          },
          "pan": {
            "type": "string"
          },
          "pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ExternalServiceSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "$ref": "#/components/schemas/ExternalServiceType"
          },
          "classId": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "type": "string",
            "nullable": true
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionExternalServiceSetting"
            },
            "nullable": true
          },
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyExternalServiceSetting"
            },
            "nullable": true
          },
          "systemSettings": {
            "$ref": "#/components/schemas/SystemSettings"
          },
          "systemSettingsId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ExternalServiceSettingDto": {
        "required": [
          "classId",
          "url",
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "classId": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ExternalServiceType"
          },
          "config": {
            "type": "string",
            "nullable": true
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "currencies": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalServiceType": {
        "enum": [
          "Processor",
          "Issuer",
          "Acquirer",
          "MoneyHolder",
          "User",
          "Exchange",
          "Notification"
        ],
        "type": "string"
      },
      "FeeDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "fromCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "fromCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "toCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "toCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "fromPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "toPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentTypeValues"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinitionValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeDefinitionDto": {
        "required": [
          "fromCurrencyId",
          "toCurrencyId",
          "fromPaymentMethodType",
          "toPaymentMethodType",
          "transactionType",
          "paymentType",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "fromCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "fromCurrency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "toCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "toCurrency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "fromPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "toPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentTypeValues"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinitionValueDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeDefinitionValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "feeDefinitionId": {
            "type": "string",
            "format": "uuid"
          },
          "feeDefinition": {
            "$ref": "#/components/schemas/FeeDefinition"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "type": {
            "$ref": "#/components/schemas/FeeTypeValues"
          },
          "unit": {
            "$ref": "#/components/schemas/FeeUnitValues"
          },
          "paidBy": {
            "$ref": "#/components/schemas/FeePaidByValues"
          },
          "isChoice": {
            "type": "boolean"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinitionValueCountry"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeDefinitionValueCountry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "feeDefinitionValueId": {
            "type": "string",
            "format": "uuid"
          },
          "feeDefinitionValue": {
            "$ref": "#/components/schemas/FeeDefinitionValue"
          },
          "fromCountryIso": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "toCountryIso": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeeDefinitionValueCountryDto": {
        "required": [
          "feeDefinitionValueId",
          "fromCountryIso",
          "toCountryIso",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "feeDefinitionValueId": {
            "type": "string",
            "format": "uuid"
          },
          "fromCountryIso": {
            "type": "string"
          },
          "toCountryIso": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FeeDefinitionValueDto": {
        "required": [
          "feeDefinitionId",
          "amount",
          "type",
          "unit",
          "paidBy",
          "isChoice",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "feeDefinitionId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "type": {
            "$ref": "#/components/schemas/FeeTypeValues"
          },
          "unit": {
            "$ref": "#/components/schemas/FeeUnitValues"
          },
          "paidBy": {
            "$ref": "#/components/schemas/FeePaidByValues"
          },
          "isChoice": {
            "type": "boolean"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinitionValueCountryDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeePaidByValues": {
        "enum": [
          "Sender",
          "Receiver",
          "Both",
          "Tfx"
        ],
        "type": "string"
      },
      "FeePeriodUnitValues": {
        "enum": [
          "Date",
          "Month",
          "Quarter",
          "Year"
        ],
        "type": "string"
      },
      "FeeTypeValues": {
        "enum": [
          "Internal",
          "External"
        ],
        "type": "string"
      },
      "FeeUnitValues": {
        "enum": [
          "Fixed",
          "Percentage"
        ],
        "type": "string"
      },
      "FindUserByMobileEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FindUserByMobileEmailResultDto": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "FindUserByMobileNumberRequest": {
        "required": [
          "mobileNumber"
        ],
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "FindUserByMobileNumberResultDto": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "FinishSetupPhysicalWalletRequest": {
        "required": [
          "physicalWalletId",
          "physicalWalletReference",
          "otp"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "physicalWalletReference": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ForgotPinRequest": {
        "required": [
          "loginPin",
          "mobileNumber"
        ],
        "type": "object",
        "properties": {
          "loginPin": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GeneratePersoBatchRequest": {
        "required": [
          "numberOfRecords",
          "physicalWalletTypeId"
        ],
        "type": "object",
        "properties": {
          "numberOfRecords": {
            "type": "integer",
            "format": "int32"
          },
          "physicalWalletTypeId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetActivatedStickerDto": {
        "required": [
          "serial"
        ],
        "type": "object",
        "properties": {
          "serial": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "macAddress": {
            "type": "string",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "signedP": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllIssuersResultDto": {
        "required": [
          "issuers"
        ],
        "type": "object",
        "properties": {
          "issuers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "GetAllStickersDto": {
        "required": [
          "id",
          "serial"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "serial": {
            "type": "string"
          },
          "macAddress": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllTransactionsDto": {
        "required": [
          "id",
          "amountFrom",
          "amountTo",
          "currencyFromId",
          "currencyFrom",
          "currencyToId",
          "currencyTo",
          "type",
          "paymentType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "amountFrom": {
            "type": "number",
            "format": "double"
          },
          "amountTo": {
            "type": "number",
            "format": "double"
          },
          "currencyFromId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyFrom": {
            "type": "string"
          },
          "currencyToId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyTo": {
            "type": "string"
          },
          "userIdFrom": {
            "type": "string",
            "format": "uuid"
          },
          "fromUserFirstName": {
            "type": "string",
            "nullable": true
          },
          "fromUserMiddleName": {
            "type": "string",
            "nullable": true
          },
          "fromUserLastName": {
            "type": "string",
            "nullable": true
          },
          "userNameFrom": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "userIdTo": {
            "type": "string",
            "format": "uuid"
          },
          "toUserFirstName": {
            "type": "string",
            "nullable": true
          },
          "toUserMiddleName": {
            "type": "string",
            "nullable": true
          },
          "toUserLastName": {
            "type": "string",
            "nullable": true
          },
          "userNameTo": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "fromBaseType": {
            "type": "string",
            "nullable": true
          },
          "toBaseType": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentTypeValues"
          },
          "transactionTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetAllUsersDto": {
        "required": [
          "id",
          "login",
          "firstName",
          "lastName",
          "fullName",
          "role",
          "email",
          "mobileNumber",
          "applicationInstanceId",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "login": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "role": {
            "$ref": "#/components/schemas/RoleValues"
          },
          "email": {
            "type": "string"
          },
          "mobileNumber": {
            "type": "string"
          },
          "applicationInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatusValues"
          }
        },
        "additionalProperties": false
      },
      "GetAvailableRegionsSuccessDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetBalanceDto": {
        "required": [
          "currencyId",
          "totalBalance",
          "spentThisMonth",
          "locked",
          "spendable"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "totalBalance": {
            "type": "number",
            "format": "double"
          },
          "spentThisMonth": {
            "type": "number",
            "format": "double"
          },
          "locked": {
            "type": "number",
            "format": "double"
          },
          "spendable": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GetContactDto": {
        "required": [
          "email",
          "userId",
          "mobileNumber",
          "name",
          "nickName"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "mobileNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nickName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetEmailOtpResultDto": {
        "required": [
          "otp"
        ],
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetLockStatusDto": {
        "required": [
          "locked",
          "hoursLeft",
          "minutesLeft",
          "endTime"
        ],
        "type": "object",
        "properties": {
          "locked": {
            "type": "boolean"
          },
          "hoursLeft": {
            "type": "integer",
            "format": "int32"
          },
          "minutesLeft": {
            "type": "integer",
            "format": "int32"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetMerchantsDto": {
        "required": [
          "id",
          "firstName",
          "lastName",
          "login",
          "phoneNumber",
          "email",
          "status",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "login": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatusValues"
          },
          "role": {
            "$ref": "#/components/schemas/RoleValues"
          }
        },
        "additionalProperties": false
      },
      "GetPaymentMethodInstanceBalanceAmountsDto": {
        "required": [
          "currency",
          "value"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GetPaymentMethodInstanceSettingResultDto": {
        "required": [
          "spendPerDayLimit",
          "spendPerMonthLimit"
        ],
        "type": "object",
        "properties": {
          "spendPerDayLimit": {
            "type": "number",
            "format": "double"
          },
          "spendPerMonthLimit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GetPendingTipsDto": {
        "required": [
          "pendingTips"
        ],
        "type": "object",
        "properties": {
          "pendingTips": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletCVCResultDto": {
        "required": [
          "cvc"
        ],
        "type": "object",
        "properties": {
          "cvc": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletDynamicCVCResultDto": {
        "required": [
          "cvc"
        ],
        "type": "object",
        "properties": {
          "cvc": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletDynamicExpiryResultDto": {
        "required": [
          "expiryDate"
        ],
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletDynamicPanResultDto": {
        "required": [
          "pan"
        ],
        "type": "object",
        "properties": {
          "pan": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletDynamicPinResultDto": {
        "required": [
          "pin"
        ],
        "type": "object",
        "properties": {
          "pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletExpiryResultDto": {
        "required": [
          "expiryDate"
        ],
        "type": "object",
        "properties": {
          "expiryDate": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletPanResultDto": {
        "required": [
          "pan"
        ],
        "type": "object",
        "properties": {
          "pan": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletPinResultDto": {
        "required": [
          "pin"
        ],
        "type": "object",
        "properties": {
          "pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetPhysicalWalletPreAuthResultDto": {
        "required": [
          "id",
          "physicalWalletId",
          "functionNumber",
          "startedOn",
          "expiresOn",
          "multiUse",
          "maximumAmount",
          "paymentTypes"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "startedOn": {
            "type": "string",
            "format": "date-time"
          },
          "expiresOn": {
            "type": "string",
            "format": "date-time"
          },
          "multiUse": {
            "type": "boolean"
          },
          "maximumAmount": {
            "type": "number",
            "format": "double"
          },
          "paymentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletPaymentType"
            }
          }
        },
        "additionalProperties": false
      },
      "GetPolicyDto": {
        "required": [
          "policyActive",
          "minimumPercentage",
          "distributedPercentage"
        ],
        "type": "object",
        "properties": {
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "policyActive": {
            "type": "boolean"
          },
          "minimumPercentage": {
            "type": "number",
            "format": "double"
          },
          "distributedPercentage": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GetRequestFundsViaLinkDto": {
        "required": [
          "id",
          "userId",
          "userName",
          "currencyId",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetRoamingUsersRequest": {
        "type": "object",
        "properties": {
          "distanceKm": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetServiceClassIdResultDto": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ExternalServiceType"
          },
          "classIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetSMSOtpResultDto": {
        "required": [
          "otp"
        ],
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetStickerActivateResultDto": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "sig": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetStickerKeysDto": {
        "type": "object",
        "properties": {
          "serverPubKey": {
            "type": "string",
            "nullable": true
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetStickerPinCodeResultDto": {
        "required": [
          "pinCode"
        ],
        "type": "object",
        "properties": {
          "pinCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetSummaryTransactionFeeAmountDto": {
        "type": "object",
        "properties": {
          "day": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "week": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "month": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "threeMonth": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "year": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTipeesByVenueIdDto": {
        "required": [
          "id",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/TipseeRoleValues"
          },
          "activeStatus": {
            "type": "string",
            "nullable": true
          },
          "validateStatus": {
            "type": "string",
            "nullable": true
          },
          "workingStatus": {
            "type": "string",
            "nullable": true
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "workingSince": {
            "type": "string",
            "format": "date-time"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GetTipeeWorkingDto": {
        "required": [
          "venueName",
          "venueId",
          "workHours",
          "workMinutes",
          "startTime",
          "hoursToGo",
          "minutesToGo"
        ],
        "type": "object",
        "properties": {
          "venueName": {
            "type": "string"
          },
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "workHours": {
            "type": "integer",
            "format": "int32"
          },
          "workMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "hoursToGo": {
            "type": "integer",
            "format": "int32"
          },
          "minutesToGo": {
            "type": "integer",
            "format": "int32"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetTransactionAmountByPeriodDto": {
        "required": [
          "transactionAmount",
          "dateTime"
        ],
        "type": "object",
        "properties": {
          "transactionAmount": {
            "type": "number",
            "format": "double"
          },
          "dateTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetTransactionAmountRequest": {
        "required": [
          "periodUnit",
          "currencyId",
          "beginDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "periodUnit": {
            "$ref": "#/components/schemas/TransactionPeriodUnitValues"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetTransactionDto": {
        "required": [
          "transactionId",
          "type",
          "currency",
          "currencySymbol",
          "transactionTime",
          "amount"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "currency": {
            "type": "string"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currencySymbol": {
            "type": "string"
          },
          "transactionTime": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "conversionRatio": {
            "type": "number",
            "format": "double"
          },
          "moneyCameFromDescription": {
            "type": "string",
            "nullable": true
          },
          "convertedAmount": {
            "type": "number",
            "format": "double"
          },
          "convertedCurrency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTransactionFeeAmountByBaseCurrencyDto": {
        "required": [
          "baseCurrencyId"
        ],
        "type": "object",
        "properties": {
          "baseCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTransactionFeeAmountByPeriodDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTransactionFeeAmountByPeriodDto": {
        "required": [
          "fee",
          "dateTime"
        ],
        "type": "object",
        "properties": {
          "fee": {
            "type": "number",
            "format": "double"
          },
          "dateTime": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetTransactionFeesByBaseCurrencyRequest": {
        "required": [
          "periodUnit",
          "beginDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "periodUnit": {
            "$ref": "#/components/schemas/FeePeriodUnitValues"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetTransactionFeesRequest": {
        "required": [
          "periodUnit",
          "currencyId",
          "beginDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "periodUnit": {
            "$ref": "#/components/schemas/FeePeriodUnitValues"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "beginDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetTransactionNumberDto": {
        "required": [
          "week",
          "month",
          "threeMonth",
          "year"
        ],
        "type": "object",
        "properties": {
          "week": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "threeMonth": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetTransactionsAmountsDto": {
        "type": "object",
        "properties": {
          "week": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "month": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "threeMonth": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "year": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserProfileByAdminDto": {
        "required": [
          "id",
          "mobileNumber",
          "email",
          "fullName",
          "surName",
          "joiningDate",
          "country",
          "nationality",
          "registerMethod"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "mobileNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string"
          },
          "surName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "joiningDate": {
            "type": "string",
            "format": "date-time"
          },
          "country": {
            "type": "string"
          },
          "nationality": {
            "type": "string"
          },
          "registerMethod": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetUserRequestFundDto": {
        "required": [
          "id",
          "userId",
          "userName",
          "amount",
          "currencyId",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/RequestFundStatusValues"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetVenuesByMerchantIdDto": {
        "required": [
          "id",
          "name",
          "country",
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "addressId": {
            "type": "string",
            "format": "uuid"
          },
          "activeStatus": {
            "type": "string",
            "nullable": true
          },
          "validateStatus": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetVersionDto": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "JoinVenueRequest": {
        "required": [
          "venueId"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "Kyc": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "level": {
            "$ref": "#/components/schemas/KycLevelValues"
          },
          "documentType": {
            "$ref": "#/components/schemas/KycDocumentTypeValues"
          },
          "frontSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "backSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "frontFaceImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfAddressImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfIncomeImageUrl": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/KycStatusValues"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "checkByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checkBy": {
            "$ref": "#/components/schemas/User"
          },
          "kycHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KycHistory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KycDocumentTypeValues": {
        "enum": [
          "None",
          "NationalId",
          "DrivingId",
          "Passport"
        ],
        "type": "string"
      },
      "KycDto": {
        "required": [
          "level",
          "documentType",
          "status",
          "userId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "level": {
            "$ref": "#/components/schemas/KycLevelValues"
          },
          "documentType": {
            "$ref": "#/components/schemas/KycDocumentTypeValues"
          },
          "frontSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "backSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "frontFaceImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfAddressImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfIncomeImageUrl": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/KycStatusValues"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userFullName": {
            "type": "string",
            "nullable": true
          },
          "checkByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checkByUserFullName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KycHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "kycId": {
            "type": "string",
            "format": "uuid"
          },
          "kyc": {
            "$ref": "#/components/schemas/Kyc"
          },
          "level": {
            "$ref": "#/components/schemas/KycLevelValues"
          },
          "documentType": {
            "$ref": "#/components/schemas/KycDocumentTypeValues"
          },
          "frontSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "backSideImageUrl": {
            "type": "string",
            "nullable": true
          },
          "frontFaceImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfAddressImageUrl": {
            "type": "string",
            "nullable": true
          },
          "proofOfIncomeImageUrl": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/KycStatusValues"
          },
          "auditType": {
            "$ref": "#/components/schemas/AuditType"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "checkByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checkBy": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "KycHistoryDto": {
        "required": [
          "kycId",
          "level",
          "documentType",
          "status",
          "userId",
          "auditType",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "kycId": {
            "type": "string",
            "format": "uuid"
          },
          "level": {
            "$ref": "#/components/schemas/KycLevelValues"
          },
          "documentType": {
            "$ref": "#/components/schemas/KycDocumentTypeValues"
          },
          "status": {
            "$ref": "#/components/schemas/KycStatusValues"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userFullName": {
            "type": "string",
            "nullable": true
          },
          "checkByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checkByUserFullName": {
            "type": "string",
            "nullable": true
          },
          "auditType": {
            "$ref": "#/components/schemas/AuditType"
          }
        },
        "additionalProperties": false
      },
      "KycLevelValues": {
        "enum": [
          "NoKyc",
          "AddressInfo",
          "IdOrPassport",
          "ProofOfAddress",
          "ProofOfIncome"
        ],
        "type": "string"
      },
      "KycStatusValues": {
        "enum": [
          "Pending",
          "Approved",
          "Rejected"
        ],
        "type": "string"
      },
      "LeaveVenueRequest": {
        "required": [
          "venueId"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "LimitTypeValues": {
        "enum": [
          "Hour",
          "Day",
          "Week",
          "Month",
          "Year"
        ],
        "type": "string"
      },
      "LockActivityRequest": {
        "required": [
          "venueId"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "hours": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockPaymentMethodRequest": {
        "required": [
          "paymentMethodId"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "LoginBiometricsRequest": {
        "required": [
          "mobileNumber",
          "message",
          "signature"
        ],
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LoginPasswordRequest": {
        "required": [
          "login",
          "password"
        ],
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LoginPINRequest": {
        "required": [
          "mobileNumber",
          "pin"
        ],
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string"
          },
          "pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LogoutInfoRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "PayeeInfoRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "account_no": {
            "type": "string",
            "nullable": true
          },
          "sortcode": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "swiftbic": {
            "type": "string",
            "nullable": true
          },
          "bank_name": {
            "type": "string",
            "nullable": true
          },
          "bank_address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayInfoRequestDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "nullable": true
          },
          "reference": {
            "type": "string",
            "nullable": true
          },
          "payeeinfo": {
            "$ref": "#/components/schemas/PayeeInfoRequestDto"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "canSend": {
            "type": "boolean"
          },
          "canReceive": {
            "type": "boolean"
          },
          "canExchange": {
            "type": "boolean"
          },
          "hasBalance": {
            "type": "boolean"
          },
          "canBank": {
            "type": "boolean"
          },
          "canLock": {
            "type": "boolean"
          },
          "autoCreatePmi": {
            "type": "boolean"
          },
          "riskFactor": {
            "type": "number",
            "format": "double"
          },
          "minimalTransferOutAmount": {
            "type": "number",
            "format": "double"
          },
          "minimalExchangeAmount": {
            "type": "number",
            "format": "double"
          },
          "subCurrencyName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "subCurrencySymbol": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "subCurrencyValue": {
            "type": "number",
            "format": "double"
          },
          "paymentMethodInstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodInstance"
            },
            "nullable": true
          },
          "paymentMethodRegions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodRegion"
            },
            "nullable": true
          },
          "paymentMethodCurrencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodCurrency"
            },
            "nullable": true
          },
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            },
            "nullable": true
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodCurrency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodDto": {
        "required": [
          "name",
          "baseType",
          "canSend",
          "canReceive",
          "canExchange",
          "hasBalance",
          "canBank",
          "canLock",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "canSend": {
            "type": "boolean"
          },
          "canReceive": {
            "type": "boolean"
          },
          "canExchange": {
            "type": "boolean"
          },
          "hasBalance": {
            "type": "boolean"
          },
          "canBank": {
            "type": "boolean"
          },
          "canLock": {
            "type": "boolean"
          },
          "riskFactor": {
            "type": "number",
            "format": "double"
          },
          "minimalTransferOutAmount": {
            "type": "number",
            "format": "double"
          },
          "minimalExchangeAmount": {
            "type": "number",
            "format": "double"
          },
          "subCurrencyName": {
            "type": "string",
            "nullable": true
          },
          "subCurrencySymbol": {
            "type": "string",
            "nullable": true
          },
          "subCurrencyValue": {
            "type": "number",
            "format": "double"
          },
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyDto"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "alias": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "color": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          },
          "autogenerated": {
            "type": "boolean"
          },
          "autoGenerateHash": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "receiveNotifications": {
            "type": "boolean"
          },
          "receiveEmail": {
            "type": "boolean"
          },
          "receiveSMS": {
            "type": "boolean"
          },
          "acquirerTokenId": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "accountName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "swiftBSB": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "bankAddressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "bankAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "beneficiaryAddressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "beneficiaryAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "cvv": {
            "maxLength": 4,
            "type": "string",
            "nullable": true
          },
          "spent": {
            "type": "number",
            "format": "double"
          },
          "spentDay": {
            "type": "number",
            "format": "double"
          },
          "spentMonth": {
            "type": "number",
            "format": "double"
          },
          "balance": {
            "type": "number",
            "format": "double"
          },
          "locked": {
            "type": "number",
            "format": "double"
          },
          "spendable": {
            "type": "number",
            "format": "double"
          },
          "frozen": {
            "type": "boolean"
          },
          "walletId": {
            "type": "string",
            "format": "uuid"
          },
          "wallet": {
            "$ref": "#/components/schemas/Wallet"
          },
          "fromTransactionLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLine"
            },
            "nullable": true
          },
          "toTransactionLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLine"
            },
            "nullable": true
          },
          "physicalWallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletFundingPaymentMethod"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodInstanceDto": {
        "required": [
          "alias",
          "receiveNotifications",
          "receiveEmail",
          "receiveSMS",
          "balance",
          "spendable",
          "canExchange",
          "canBank",
          "canSend",
          "canReceive",
          "currencyId",
          "currency",
          "currencySymbol",
          "type",
          "hasBalance",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "alias": {
            "type": "string"
          },
          "scheme": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodDto"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          },
          "autogenerated": {
            "type": "boolean"
          },
          "receiveNotifications": {
            "type": "boolean"
          },
          "receiveEmail": {
            "type": "boolean"
          },
          "receiveSMS": {
            "type": "boolean"
          },
          "acquirerTokenId": {
            "type": "string",
            "nullable": true
          },
          "accountName": {
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "swiftBSB": {
            "type": "string",
            "nullable": true
          },
          "bankAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "beneficiaryAddress": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "spent": {
            "type": "number",
            "format": "double"
          },
          "spentDay": {
            "type": "number",
            "format": "double"
          },
          "spentMonth": {
            "type": "number",
            "format": "double"
          },
          "balance": {
            "type": "number",
            "format": "double"
          },
          "locked": {
            "type": "number",
            "format": "double"
          },
          "spendable": {
            "type": "number",
            "format": "double"
          },
          "frozen": {
            "type": "boolean"
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "bankAddressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "beneficiaryAddressId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "walletId": {
            "type": "string",
            "format": "uuid"
          },
          "canExchange": {
            "type": "boolean"
          },
          "canBank": {
            "type": "boolean"
          },
          "canSend": {
            "type": "boolean"
          },
          "canReceive": {
            "type": "boolean"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "type": "string"
          },
          "currencySymbol": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "hasBalance": {
            "type": "boolean"
          },
          "dailySpent": {
            "type": "number",
            "format": "double"
          },
          "weeklySpent": {
            "type": "number",
            "format": "double"
          },
          "monthlySpent": {
            "type": "number",
            "format": "double"
          },
          "minimalTransferOutAmount": {
            "type": "number",
            "format": "double"
          },
          "minimalExchangeAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodInstanceSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "spendPerDayLimit": {
            "type": "number",
            "format": "double"
          },
          "spendPerMonthLimit": {
            "type": "number",
            "format": "double"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodRegion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "regionId": {
            "type": "string",
            "format": "uuid"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodTypeValues": {
        "enum": [
          "Card",
          "Bank",
          "CustCrypto",
          "Prepaid",
          "LocalCrypto",
          "Crypto",
          "ThirdPartyLoyalty",
          "InternalLoyalty",
          "Ativos"
        ],
        "type": "string"
      },
      "PaymentTypeValues": {
        "enum": [
          "Internal",
          "Sepa",
          "Card",
          "Swift",
          "Chaps",
          "Bacs",
          "Fast",
          "Ach",
          "FasterPayments",
          "Fx",
          "Wire",
          "InternalBlockchain",
          "ExternalBlockchain"
        ],
        "type": "string"
      },
      "PayRequestFundViaLinkRequest": {
        "required": [
          "requestFundId",
          "fromPaymentMethodInstanceId"
        ],
        "type": "object",
        "properties": {
          "requestFundId": {
            "type": "string",
            "format": "uuid"
          },
          "fromPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          },
          "transactionRequestId": {
            "type": "string",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PayUserFundRequest": {
        "required": [
          "requestUserFundId",
          "fromPaymentMethodInstanceId"
        ],
        "type": "object",
        "properties": {
          "requestUserFundId": {
            "type": "string",
            "format": "uuid"
          },
          "fromPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          },
          "transactionRequestId": {
            "type": "string",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhysicalWallet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "physicalWalletTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/PhysicalWalletType"
          },
          "status": {
            "$ref": "#/components/schemas/PhysicalWalletStatus"
          },
          "firstname": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "middlename": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "country": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "mobileNumber": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "dynamicPinEnabled": {
            "type": "boolean"
          },
          "onlinePayment": {
            "type": "boolean"
          },
          "contactlessUsage": {
            "type": "boolean"
          },
          "magstripeUsage": {
            "type": "boolean"
          },
          "onlinePaymentLimit": {
            "type": "number",
            "format": "double"
          },
          "contactlessUsageLimit": {
            "type": "number",
            "format": "double"
          },
          "magstripeUsageLimit": {
            "type": "number",
            "format": "double"
          },
          "preAuthEnabled": {
            "type": "boolean"
          },
          "preAuthMagStripeEnabled": {
            "type": "boolean"
          },
          "preAuthContactlessEnabled": {
            "type": "boolean"
          },
          "preAuthPinAndSigEnabled": {
            "type": "boolean"
          },
          "preAuthChipAndPinEnabled": {
            "type": "boolean"
          },
          "externalPhysicalWalletId": {
            "type": "string",
            "nullable": true
          },
          "physicalWalletPlanId": {
            "type": "string",
            "format": "uuid"
          },
          "plan": {
            "$ref": "#/components/schemas/PhysicalWalletPlan"
          },
          "preAuths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletPreAuth"
            },
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletFundingPaymentMethod"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletDto": {
        "required": [
          "status",
          "firstname",
          "lastname",
          "mobileNumber",
          "email",
          "dynamicPinEnabled",
          "onlinePayment",
          "contactlessUsage",
          "magstripeUsage",
          "onlinePaymentLimit",
          "contactlessUsageLimit",
          "magstripeUsageLimit",
          "preAuthEnabled",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/PhysicalWalletStatus"
          },
          "firstname": {
            "type": "string"
          },
          "middlename": {
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "type": "string"
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "mobileNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "material": {
            "type": "string",
            "nullable": true
          },
          "scheme": {
            "$ref": "#/components/schemas/PhysicalWalletSchemeValues"
          },
          "finish": {
            "type": "string",
            "nullable": true
          },
          "dynamicPinEnabled": {
            "type": "boolean"
          },
          "onlinePayment": {
            "type": "boolean"
          },
          "contactlessUsage": {
            "type": "boolean"
          },
          "magstripeUsage": {
            "type": "boolean"
          },
          "onlinePaymentLimit": {
            "type": "number",
            "format": "double"
          },
          "contactlessUsageLimit": {
            "type": "number",
            "format": "double"
          },
          "magstripeUsageLimit": {
            "type": "number",
            "format": "double"
          },
          "preAuthEnabled": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/PhysicalWalletTypeDto"
          },
          "plan": {
            "$ref": "#/components/schemas/PhysicalWalletPlanDto"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletFundingPaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "physicalWallet": {
            "$ref": "#/components/schemas/PhysicalWallet"
          },
          "paymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethodInstance": {
            "$ref": "#/components/schemas/PaymentMethodInstance"
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletPaymentMethodDto": {
        "type": "object",
        "properties": {
          "paymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletPaymentType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32",
        "x-enum-varnames": [
          "Contactless",
          "Magstripe"
        ]
      },
      "PhysicalWalletPersoDto": {
        "required": [
          "physicalWalletReference",
          "physicalWalletXml",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "physicalWalletReference": {
            "type": "string"
          },
          "physicalWalletXml": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "period": {
            "$ref": "#/components/schemas/PhysicalWalletPlanPeriodValues"
          },
          "physicalWalletTierId": {
            "type": "string",
            "format": "uuid"
          },
          "tier": {
            "$ref": "#/components/schemas/PhysicalWalletTier"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "physicalWallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWallet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletPlanDto": {
        "required": [
          "name",
          "price",
          "currencyId",
          "currency",
          "period",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "period": {
            "$ref": "#/components/schemas/PhysicalWalletPlanPeriodValues"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletPlanPeriodValues": {
        "enum": [
          "Month",
          "Quarter",
          "Year"
        ],
        "type": "string"
      },
      "PhysicalWalletPOSTypes": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "PhysicalWalletPreAuth": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "physicalWallet": {
            "$ref": "#/components/schemas/PhysicalWallet"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "startedOn": {
            "type": "string",
            "format": "date-time"
          },
          "expiresOn": {
            "type": "string",
            "format": "date-time"
          },
          "multiUse": {
            "type": "boolean"
          },
          "maximumAmount": {
            "type": "number",
            "format": "double"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PhysicalWalletPaymentType"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletSchemeValues": {
        "enum": [
          "Visa",
          "MasterCard",
          "Cup",
          "ClosedLoop"
        ],
        "type": "string"
      },
      "PhysicalWalletStatus": {
        "enum": [
          "Active",
          "InActive",
          "Blocked",
          "Frozen",
          "Stolen"
        ],
        "type": "string"
      },
      "PhysicalWalletTier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ordering": {
            "type": "integer",
            "format": "int32"
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletPlan"
            },
            "nullable": true
          },
          "physicalWalletTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletTierDto": {
        "required": [
          "name",
          "ordering",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ordering": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageLink": {
            "type": "string",
            "nullable": true
          },
          "walletTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "walletType": {
            "$ref": "#/components/schemas/WalletType"
          },
          "scheme": {
            "$ref": "#/components/schemas/PhysicalWalletSchemeValues"
          },
          "hasKeyboard": {
            "type": "boolean"
          },
          "hasCvvDisplay": {
            "type": "boolean"
          },
          "hasPinDisplay": {
            "type": "boolean"
          },
          "hasPanDisplay": {
            "type": "boolean"
          },
          "hasDynamicCvv": {
            "type": "boolean"
          },
          "hasDynamicPan": {
            "type": "boolean"
          },
          "hasDynamicPin": {
            "type": "boolean"
          },
          "hasDynamicExpiry": {
            "type": "boolean"
          },
          "physicalAuth": {
            "type": "boolean"
          },
          "preAuthAllEnabled": {
            "type": "boolean"
          },
          "preAuthMultiUseAllAllowed": {
            "type": "boolean"
          },
          "preAuthAllMandatory": {
            "type": "boolean"
          },
          "preAuthMagstripeEnabled": {
            "type": "boolean"
          },
          "preAuthMagstripeMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthMagstripeMandatory": {
            "type": "boolean"
          },
          "preAuthContactlessEnabled": {
            "type": "boolean"
          },
          "preAuthContactlessMandatory": {
            "type": "boolean"
          },
          "preAuthContactlessMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthChipAndSigEnabled": {
            "type": "boolean"
          },
          "preAuthChipAndSigMandatory": {
            "type": "boolean"
          },
          "preAuthChipAndSigMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthChipAndPinEnabled": {
            "type": "boolean"
          },
          "preAuthChipAndPinMandatory": {
            "type": "boolean"
          },
          "preAuthChipAndPinMinAmount": {
            "type": "number",
            "format": "double"
          },
          "material": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "color": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "appColor": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "finish": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "costCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "costCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "issuerName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "physicalWalletTierId": {
            "type": "string",
            "format": "uuid"
          },
          "tier": {
            "$ref": "#/components/schemas/PhysicalWalletTier"
          },
          "physicalWallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWallet"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletTypeDto": {
        "required": [
          "name",
          "hasKeyboard",
          "hasCvvDisplay",
          "hasPinDisplay",
          "hasPanDisplay",
          "hasDynamicCvv",
          "hasDynamicPan",
          "hasDynamicPin",
          "hasDynamicExpiry",
          "physicalAuth",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageLink": {
            "type": "string",
            "nullable": true
          },
          "tier": {
            "$ref": "#/components/schemas/PhysicalWalletTierDto"
          },
          "walletType": {
            "$ref": "#/components/schemas/WalletTypeDto"
          },
          "scheme": {
            "$ref": "#/components/schemas/PhysicalWalletSchemeValues"
          },
          "hasKeyboard": {
            "type": "boolean"
          },
          "hasCvvDisplay": {
            "type": "boolean"
          },
          "hasPinDisplay": {
            "type": "boolean"
          },
          "hasPanDisplay": {
            "type": "boolean"
          },
          "hasDynamicCvv": {
            "type": "boolean"
          },
          "hasDynamicPan": {
            "type": "boolean"
          },
          "hasDynamicPin": {
            "type": "boolean"
          },
          "hasDynamicExpiry": {
            "type": "boolean"
          },
          "physicalAuth": {
            "type": "boolean"
          },
          "material": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "appColor": {
            "type": "string",
            "nullable": true
          },
          "finish": {
            "type": "string",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "costCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "costCurrency": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "issuerName": {
            "type": "string",
            "nullable": true
          },
          "preAuthAllEnabled": {
            "type": "boolean"
          },
          "preAuthMultiUseAllAllowed": {
            "type": "boolean"
          },
          "preAuthAllMandatory": {
            "type": "boolean"
          },
          "preAuthMagstripeEnabled": {
            "type": "boolean"
          },
          "preAuthMagstripeMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthMagstripeMandatory": {
            "type": "boolean"
          },
          "preAuthContactlessEnabled": {
            "type": "boolean"
          },
          "preAuthContactlessMandatory": {
            "type": "boolean"
          },
          "preAuthContactlessMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthChipAndSigEnabled": {
            "type": "boolean"
          },
          "preAuthChipAndSigMandatory": {
            "type": "boolean"
          },
          "preAuthChipAndSigMinAmount": {
            "type": "number",
            "format": "double"
          },
          "preAuthChipAndPinEnabled": {
            "type": "boolean"
          },
          "preAuthChipAndPinMandatory": {
            "type": "boolean"
          },
          "preAuthChipAndPinMinAmount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PhysicalWalletValidateStatus": {
        "enum": [
          "Approved",
          "Declined"
        ],
        "type": "string"
      },
      "ReadMessageRequest": {
        "required": [
          "messageId",
          "userReadId"
        ],
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "format": "uuid"
          },
          "userReadId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "RecipientAddress": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "county": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecipientBankAddressDto": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "county": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecurringRequestDto": {
        "type": "object",
        "properties": {
          "regularity": {
            "type": "string",
            "nullable": true
          },
          "ondate": {
            "type": "string",
            "nullable": true
          },
          "startdate": {
            "type": "string",
            "nullable": true
          },
          "enddate": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Region": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "ISOName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "primaryCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "primaryCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodRegion"
            },
            "nullable": true
          },
          "externalServiceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionExternalServiceSetting"
            },
            "nullable": true
          },
          "currencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Currency"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegionDto": {
        "required": [
          "name",
          "iSOName",
          "primaryCurrencyId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "ISOName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "primaryCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RegionExternalServiceSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "regionId": {
            "type": "string",
            "format": "uuid"
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "externalServiceSettingId": {
            "type": "string",
            "format": "uuid"
          },
          "externalServiceSetting": {
            "$ref": "#/components/schemas/ExternalServiceSetting"
          }
        },
        "additionalProperties": false
      },
      "RemoveContactRequest": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "RemoveUserRequest": {
        "required": [
          "venueId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "RequestAnonymousFund": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "originalUserId": {
            "type": "string",
            "format": "uuid"
          },
          "originalUser": {
            "$ref": "#/components/schemas/User"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestAnonymousFundTransaction"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestAnonymousFundTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "requestAnonymousFundId": {
            "type": "string",
            "format": "uuid"
          },
          "requestAnonymousFund": {
            "$ref": "#/components/schemas/RequestAnonymousFund"
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        },
        "additionalProperties": false
      },
      "RequestFundStatusValues": {
        "enum": [
          "Requested",
          "Paid",
          "Denied"
        ],
        "type": "string"
      },
      "RequestFundsViaLinkRequest": {
        "required": [
          "currencyId",
          "amount"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestFundsViaLinkResultDto": {
        "required": [
          "requestFundLink"
        ],
        "type": "object",
        "properties": {
          "requestFundLink": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RequestFundToUserRequest": {
        "required": [
          "currencyId",
          "amount",
          "userId"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "RequestUserFund": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "originalUserId": {
            "type": "string",
            "format": "uuid"
          },
          "originalUser": {
            "$ref": "#/components/schemas/User"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "status": {
            "$ref": "#/components/schemas/RequestFundStatusValues"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        },
        "additionalProperties": false
      },
      "ResendEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ResendSMSRequest": {
        "required": [
          "mobileNumber"
        ],
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ReservePersoRequest": {
        "type": "object",
        "properties": {
          "serial": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReservePersoResultDto": {
        "required": [
          "persoFile"
        ],
        "type": "object",
        "properties": {
          "persoFile": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ReturnCodes": {
        "enum": [
          0,
          100,
          101,
          102,
          103,
          104,
          105,
          1000,
          1001,
          1002,
          1003,
          1004,
          1005,
          1006,
          1007,
          1008,
          1009,
          1010,
          1011,
          1012,
          1013,
          1014,
          1015,
          1016,
          1017,
          1018,
          1019,
          1020,
          1021,
          1022,
          1023,
          1024,
          1025,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1032,
          1033,
          1034,
          1035,
          1036,
          1037,
          1038,
          1039,
          1040,
          1041,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1049,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1056,
          1057,
          1058,
          1059,
          1060,
          1061,
          1062,
          1063,
          1064,
          1065,
          1066,
          1067,
          1068,
          1069,
          1070,
          1071,
          1072,
          1100,
          1101,
          1102,
          1200,
          1300,
          1301,
          1350,
          1500,
          1501,
          1502,
          2000,
          2001,
          2002,
          2003,
          2004,
          2005,
          2006,
          2007,
          2008,
          2009,
          2010,
          2011,
          2012,
          2013,
          2014,
          2015,
          2016,
          2017,
          2018,
          2019,
          2020,
          2021,
          2022,
          2023,
          2024,
          2025,
          2026,
          2027,
          2028,
          2029,
          2030,
          2031,
          2032,
          2033,
          2034,
          2035,
          2036,
          2037,
          2038,
          2039,
          2040,
          2041,
          2042,
          2043,
          2044,
          2045,
          2046,
          2047,
          2048,
          2049,
          2050,
          2051,
          2052,
          2053,
          2054,
          2055,
          2056,
          2057,
          2058,
          2059,
          2060,
          2061,
          2062,
          2063,
          2064,
          2065,
          2066,
          2067,
          2068,
          2069,
          2070,
          2071,
          2072,
          2073,
          2074,
          2075,
          2076,
          2100,
          2200,
          2500,
          2501,
          2502,
          2503,
          2504,
          2505,
          2506,
          2507,
          2508,
          2509,
          2510,
          2511,
          2512,
          2513,
          2514,
          2515,
          2516,
          2517,
          2518,
          2519,
          2520,
          2521,
          2522,
          2523,
          2524,
          2525,
          2526,
          2527,
          2528,
          2529,
          2530,
          2531,
          2602,
          2603,
          2604,
          2605,
          2606,
          2607,
          2608,
          2609,
          2610,
          2611,
          2700,
          2701,
          2702,
          2703,
          2704,
          2705,
          2706,
          2707,
          2708,
          2709,
          2710,
          2711,
          3000,
          3001,
          3002,
          3003,
          3004,
          3005,
          3006,
          3007,
          3008,
          3009,
          3010,
          3011,
          3012,
          3013,
          3014,
          3015,
          3016,
          3017,
          3018,
          3019,
          3020,
          3021,
          3022,
          3023,
          3024,
          3025,
          3026,
          3027,
          3028,
          3029,
          3030,
          3031,
          3032,
          3033,
          3034,
          3035,
          3036,
          3037,
          3038,
          3039,
          3040,
          3041,
          3042,
          3043,
          3044,
          3045,
          3046,
          3047,
          3048,
          3049,
          3050,
          3051,
          3052,
          3053,
          4000,
          7000,
          7001,
          7002,
          7003
        ],
        "type": "integer",
        "format": "int32",
        "x-enum-varnames": [
          "Success",
          "Invalid_Api_Key",
          "Invalid_App",
          "Request_Invalid",
          "Number_Of_Records_Exceed_Limit",
          "File_Key_Required",
          "File_Not_Found",
          "Invalid_Session",
          "Invalid_MobileNumber",
          "Invalid_OTP",
          "MobileNumber_Exists",
          "Wait_To_Verify",
          "Wrong_Flow",
          "Invalid_PIN",
          "Invalid_Email",
          "EmailId_exists",
          "Invalid_PublicKey",
          "No_Biometric_Key_Set",
          "Invalid_Biometric_Authentication",
          "Invalid_Country",
          "Invalid_User",
          "TooMany_OTP_SMS_Sent",
          "Cannot_Find_AnyUsers",
          "Cannot_Search_Myself_As_Contact",
          "User_Already_Contact",
          "Contact_Not_Exist",
          "User_Cannot_Search_For_Yourself",
          "This_Not_Tipsee_User",
          "Missing_MobileNumber",
          "MobileNumber_Already_Exists",
          "Email_Unverified",
          "User_Not_Exist",
          "Device_UUID_Or_TokenCode_Already_Exists",
          "CanNot_SendMoney_To_User_NotBelong_Contacts",
          "User_NotBelong_UserContacts",
          "MobileNumber_NotVerified",
          "User_NotSet_PIN_Yet",
          "User_Try_To_Change_But_NotLoggedOn",
          "User_NotVerified_Sms_Yet",
          "Email_Already_Exists",
          "Image_Not_Found",
          "User_Not_Exist_To_Send_Message",
          "Pin_Required",
          "Public_Key_Required",
          "UUID_Device_Required",
          "Token_Device_Required",
          "FirstName_Required",
          "LastName_Required",
          "Country_Required",
          "Login_Required",
          "Password_Required",
          "MobileNumber_Required",
          "City_Required",
          "PostCode_Required",
          "Email_Required",
          "Address_Required",
          "Otp_Required",
          "Message_Required",
          "Kyc_FrontSide_Image_Required",
          "Kyc_FrontSide_Image_Type_Invalid",
          "Kyc_FrontSide_Image_Size_Exceeds_Limit",
          "Kyc_BackSide_Image_Required",
          "Kyc_BackSide_Image_Type_Invalid",
          "Kyc_BackSide_Image_Size_Exceeds_Limit",
          "Kyc_Front_Face_Image_Required",
          "Kyc_Front_Face_Image_Type_Invalid",
          "Kyc_Front_Face_Image_Size_Exceeds_Limit",
          "Kyc_Not_Found",
          "Kyc_Level_Invalid",
          "Kyc_Level_Already_Approved",
          "Kyc_ProofOfAddress_Image_Required",
          "Kyc_ProofOfAddress_Image_Type_Invalid",
          "Kyc_ProofOfAddress_Image_Size_Exceeds_Limit",
          "Kyc_ProofOfIncome_Image_Required",
          "Kyc_ProofOfIncome_Image_Type_Invalid",
          "Kyc_ProofOfIncome_Image_Size_Exceeds_Limit",
          "Kyc_Verify_Not_Allowed",
          "Kyc_Document_Type_Invalid",
          "User_Profile_Image_Size_Exceeds_Limit",
          "Country_Phone_Code_Invalid",
          "User_Blocked",
          "User_Unverified",
          "User_Inactive",
          "Permission_Denied",
          "User_Not_Logged_On",
          "User_NotBelong_Application",
          "Invalid_Login_Combination",
          "Missing_Fields",
          "Insufficient_Permissions",
          "Application_Invalid",
          "NoCurrency_Provided_For_PaymentMethod",
          "PaymentMethod_Cannot_Exchanged",
          "PaymentMethod_Cannot_SentToBank_In_ThisRegion",
          "RequestCurrency_NotMatch_PaymentMethod_Currency",
          "Currency_NotSupported_Prepaid",
          "PaymentMethod_NotSupport_Balance",
          "Exchange_Between_Prepaids_Failed",
          "Insufficient_Funds",
          "Cannot_Find_Currency_Pair",
          "Amount_Cannot_Equal_Zero",
          "Cannot_Send_Funds_Same_Account",
          "Cannot_Buy_Fractional_Ativos",
          "From_PaymentMethod_Currency_And_Request_Currency_Must_Same",
          "Card_Transaction_Declined",
          "Invalid_PAN_Provided",
          "Invalid_CVV_Code_Provided",
          "Card_Already_Expired",
          "Bank_Transaction_Declined",
          "Access_Denied",
          "Cannot_Exchanging_Same_Currency",
          "Cannot_Exchange_Crypto",
          "Cannot_Exchange_Less_Minimal_Amount_Limit",
          "Cannot_Transfer_Less_Minimal_Amount_Limit",
          "Bank_Account_Number_Invalid",
          "Bank_Account_Name_Required",
          "Name_On_Card_Required",
          "PaymentMethod_CanNot_Send",
          "Month_Invalid",
          "Year_Invalid",
          "Time_Range_Invalid",
          "Year_Filter_Required",
          "Month_Filter_Required",
          "Quarter_Filter_Required",
          "Date_Filter_Required",
          "Base_Currency_Not_Configurated_Yet",
          "Currency_Name_Required",
          "Currency_Symbol_Required",
          "Currency_Precision_Invalid",
          "Currency_Format_Required",
          "Currency_Name_Already_Exists",
          "Currency_Name_Invalid",
          "Currency_Not_Found",
          "Crypto_Address_Required",
          "Can_Not_Request_Fund_To_Himself",
          "Region_Name_Required",
          "Region_IsoName_Required",
          "Region_Not_Found",
          "Region_IsoName_Invalid",
          "Region_IsoName_Already_Exists",
          "Region_Name_Already_Exists",
          "PaymentMethod_Name_Required",
          "PaymentMethod_MinimalTransferOutAmount_Invalid",
          "PaymentMethod_MinimalExchangeAmount_Invalid",
          "PaymentMethod_SubCurrency_Value_Invalid",
          "PaymentMethod_Not_Support_This_Currency",
          "Regions_Not_Found",
          "PaymentMethod_Name_Alreayd_Exists",
          "PaymentMethod_With_This_Currency_Already_Exists",
          "Exchange_Payment_Type_Pair_Invalid",
          "FeeDefinition_Amount_Invalid",
          "PaymentMethod_Type_Invalid",
          "Transaction_Type_Invalid",
          "Payment_Type_Invalid",
          "FeeDefinition_Not_Found",
          "FeeDefinition_Already_Exists",
          "FeeDefinitionValue_Description_Required",
          "FeeDefinitionValue_Amount_Invalid",
          "FeeDefinitionValue_Type_Invalid",
          "FeeDefinitionValue_Unit_Invalid",
          "FeeDefinitionValue_PaidBy_Invalid",
          "FeeDefinitionValue_Not_Found",
          "FeeDefinitionValueCountry_Not_Found",
          "FeeDefinitionValueCountry_Country_Pair_Already_Exists",
          "FeeDefinitionValue_Currency_Not_Found",
          "Exchange_Rate_Expiry",
          "Exchange_Rate_Not_Belong_Currency_Pair",
          "Rate_Id_Invalid",
          "PaymentMethod_Not_Exist",
          "Cannot_Receive_Payments_To_PaymenMethod",
          "No_Crypto_Access",
          "Selected_PaymentMethod_Not_Available_With_Request_Currency",
          "Invalid_PaymentMethod_Color",
          "Name_Already_Exists",
          "NoPegging_Currency_For_Ativos",
          "Cannot_Create_Wallet_With_SpecialName",
          "Cannot_Create_PaymentMethod_With_SpecialName",
          "Currency_Required",
          "Currency_Not_Supported",
          "Description_Required",
          "Amount_Cannot_Less_Than_Or_Equal_Zero",
          "RequestUserFund_Not_Exists",
          "UserFundRequest_Already_Declined",
          "UserFundRequest_Already_Paid",
          "RequestUserFund_Not_Belong_User",
          "UserContact_Belong_Region_Not_Supported_Payment",
          "RequestFund_Via_Link_Not_Found",
          "Current_user_cannot_send_money_to_himself",
          "Wallet_Not_Exists",
          "Sticker_Transaction_Package_Invalid",
          "Sticker_Not_Activated_Yet",
          "Verify_Sticker_Transaction_Message_Fail",
          "Sticker_Serial_Not_Exists",
          "Sticker_Serial_Invalid",
          "Sticker_Serial_Length_Invalid",
          "Sticker_Serial_Already_Activated",
          "Sticker_Serial_NotBelong_User",
          "Sticker_Serial_Not_Found",
          "Verified_Sig_Invalid",
          "Verify_Sig_Error",
          "Invalid_Sig",
          "Sticker_Crypt_File_Not_Exists",
          "Invalid_Venue",
          "Inactive_Venue",
          "Venue_Already_In_List",
          "Venue_Not_On_List",
          "Not_Currently_Working_In_Venue",
          "Not_In_Venue_Of_Tipee",
          "Not_Close_Enough_To_Roaming_Tipee",
          "Don_Not_have_bank_account",
          "Work_Hours_Invalid",
          "Work_Minutes_Invalid",
          "Cannot_Find_Device",
          "SystemSettings_Not_Found",
          "External_Service_ClassId_Invalid",
          "External_Service_Url_Required",
          "External_Service_Url_Format_Invalid",
          "External_Service_Type_Invalid",
          "External_Service_Setting_Not_Found",
          "External_Service_Notification_Config_Required",
          "External_Service_Notification_Config_Invalid",
          "External_Service_Sms_Notification_Provider_Invalid",
          "External_Service_Email_Notification_Provider_Invalid",
          "External_Service_PushNotification_Provider_Invalid",
          "PhysicalWallet_Digits_Number_Config_Invalid",
          "Perso_Generate_Number_Invalid",
          "Do_Not_Have_PhysicalWallet_Perso",
          "PhysicalWallet_Not_Exists",
          "Issuer_PhysicalWalletId_Invalid",
          "PhysicalWallet_Function_Number_Invalid",
          "PhysicalWallet_PreAuth_Duration_Invalid",
          "PhysicalWallet_PreAuth_MaximumAmount_Invalid",
          "PhysicalWallet_Funding_PaymentMethod_Not_Exists",
          "PhysicalWallet_Funding_PaymentMethod_Not_Belong_Current_User",
          "PhysicalWallet_Pre_Auth_Not_Exists",
          "PhysicalWallet_NotBelong_Current_User",
          "PhysicalWallet_Can_Not_Be_Used",
          "Wallet_Type_Name_Required",
          "Wallet_Type_Name_Already_Exists",
          "Wallet_Type_Not_Found",
          "Physical_Wallet_Tier_Name_Required",
          "Physical_Wallet_Tier_Name_Already_Exists",
          "Physical_Wallet_Tier_Not_Found",
          "Physical_Wallet_Plan_Name_Required",
          "Physical_Wallet_Plan_Name_Already_Exists",
          "Physical_Wallet_Plan_Price_Invalid",
          "Physical_Wallet_Plan_Not_Found",
          "Physical_Wallet_Type_Name_Required",
          "Physical_Wallet_Type_Name_Already_Exists",
          "Physical_Wallet_Type_Not_Found",
          "Physical_Wallet_Type_And_Plan_Not_Same_Tier",
          "Physical_Wallet_Type_Image_Invalid",
          "Physical_Wallet_Already_Actived",
          "Physical_Wallet_Otp_Invalid",
          "Physical_Wallet_Validate_Otp_Fail",
          "Physical_Wallet_Perso_KeyPackage_Error",
          "Physical_Wallet_Button_Not_Exists",
          "Physical_Wallet_Locked",
          "Physical_Wallet_Pin_Invalid",
          "Physical_Wallet_Drift_Can_Not_Found",
          "Physical_Wallet_Can_Not_Access_This_Endpoint",
          "Physical_Wallet_Can_Not_Used_For_Dynamic_Pin",
          "Physical_Wallet_Can_Not_Used_For_Dynamic_Pan",
          "Physical_Wallet_Can_Not_Used_For_Dynamic_Cvc",
          "Physical_Wallet_Can_Not_Used_For_Dynamic_Expire",
          "Physical_Wallet_Funding_PaymentMethod_Account_Number_Invalid",
          "Physical_Wallet_Validate_Dynamic_Expiry_Fail",
          "Card_Reference_Not_Belong_Physical_Wallet",
          "Physical_Wallet_Type_Cost_Invalid",
          "Physical_Wallet_Scheme_Invalid",
          "Physical_Wallet_Issuer_Invalid",
          "Physical_Wallet_Tier_Ordering_Invalid",
          "Physical_Wallet_Plan_Period_Invalid",
          "PhysicalWalletType_Image_Type_Invalid",
          "PhysicalWalletType_Image_Size_Exceeds_Limit",
          "PhysicalWallet_PreAuth_Not_Configured",
          "PhysicalWallet_PreAuth_Expired",
          "PhysicalWallet_PreAuth_Maximum_Amount_Too_Low",
          "Transaction_Not_Found",
          "Unknown_Error",
          "Call_Api_Error",
          "InternalServerError",
          "Endpoint_Access_Denied"
        ]
      },
      "ReturnCodesDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "keyMessage": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleValues": {
        "enum": [
          "User",
          "Admin",
          "FloatMoneyHolder",
          "Partner"
        ],
        "type": "string"
      },
      "SaveUserRequest": {
        "required": [
          "mobileNumber",
          "password",
          "firstName"
        ],
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveUserResultDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SecurityTypeValues": {
        "enum": [
          "None",
          "Sticker"
        ],
        "type": "string"
      },
      "SendMessageRequest": {
        "required": [
          "toUserId",
          "message"
        ],
        "type": "object",
        "properties": {
          "toUserId": {
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SendTipRequest": {
        "required": [
          "fromPaymentMethodId",
          "receiverId",
          "amount"
        ],
        "type": "object",
        "properties": {
          "fromPaymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "receiverId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          }
        },
        "additionalProperties": false
      },
      "SendToBankRequest": {
        "required": [
          "fromPaymentMethodId",
          "currencyId",
          "amount",
          "accountName",
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "fromPaymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "accountName": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "swiftbsb": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "$ref": "#/components/schemas/BankPaymentTypeValues"
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendToCryptoRequest": {
        "required": [
          "fromPaymentMethodId",
          "currencyId",
          "amount",
          "address"
        ],
        "type": "object",
        "properties": {
          "fromPaymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string"
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendToUserRequest": {
        "required": [
          "fromPaymentMethodId",
          "currencyId",
          "amount",
          "userId"
        ],
        "type": "object",
        "properties": {
          "fromPaymentMethodId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "walletName": {
            "type": "string",
            "nullable": true
          },
          "stickerPacket": {
            "$ref": "#/components/schemas/StickerTransactionPacket"
          },
          "isEnableSendNotification": {
            "type": "boolean"
          },
          "transactionRequestId": {
            "type": "string",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Session": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/StatusValues"
          },
          "token": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/RoleValues"
          },
          "applicationInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationInstance"
          },
          "fakeSMS": {
            "type": "boolean"
          },
          "fakeEmail": {
            "type": "boolean"
          },
          "mobileNumber": {
            "type": "string",
            "nullable": true
          },
          "pin": {
            "type": "string",
            "nullable": true
          },
          "lastSent": {
            "type": "string",
            "format": "date-time"
          },
          "verifiedSMS": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "verifiedEmailCode": {
            "type": "boolean"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "loggedOn": {
            "type": "boolean"
          },
          "serverPublicKey": {
            "type": "string",
            "nullable": true
          },
          "serverPrivateKey": {
            "type": "string",
            "nullable": true
          },
          "clientPublicKey": {
            "type": "string",
            "nullable": true
          },
          "biopublickey": {
            "type": "string",
            "nullable": true
          },
          "loginPin": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetAuthRequest": {
        "required": [
          "pin",
          "publicKey"
        ],
        "type": "object",
        "properties": {
          "pin": {
            "type": "string"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SetAuthResultDto": {
        "required": [
          "publicKey"
        ],
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SetBalanceRequest": {
        "required": [
          "paymentMethodInstanceId",
          "amount"
        ],
        "type": "object",
        "properties": {
          "paymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SetBiometricsRequest": {
        "required": [
          "publicKey"
        ],
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SetLocationRequest": {
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SetMainBankAccountRequest": {
        "required": [
          "currencyId",
          "accountName",
          "accountNumber"
        ],
        "type": "object",
        "properties": {
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "type": "string"
          },
          "accountNumber": {
            "type": "string"
          },
          "swiftbsb": {
            "type": "string",
            "nullable": true
          },
          "wallet": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "nullable": true
          },
          "dayLimit": {
            "type": "number",
            "format": "double"
          },
          "monthLimit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SetPaymentMethodInstanceSettingResultDto": {
        "type": "object",
        "properties": {
          "paymentMethodInstanceSettingId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SetPhysicalWalletPaymentMethodRequest": {
        "required": [
          "physicalWalletId",
          "functionNumber",
          "paymentMethodInstanceId"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "paymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SetPhysicalWalletPaymentMethodResultDto": {
        "required": [
          "activationCode",
          "accountNumberCode"
        ],
        "type": "object",
        "properties": {
          "activationCode": {
            "type": "string"
          },
          "accountNumberCode": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SetPhysicalWalletStatusRequest": {
        "required": [
          "physicalWalletId",
          "status"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/PhysicalWalletStatus"
          }
        },
        "additionalProperties": false
      },
      "SetPINRequest": {
        "required": [
          "pin"
        ],
        "type": "object",
        "properties": {
          "pin": {
            "type": "string"
          },
          "biometricsPublicKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetPolicyRequest": {
        "required": [
          "venueId",
          "policyActive",
          "minPercentage",
          "evenPercentage"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "policyActive": {
            "type": "boolean"
          },
          "minPercentage": {
            "type": "number",
            "format": "double"
          },
          "evenPercentage": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SetPreferenceRequest": {
        "type": "object",
        "properties": {
          "spendPerDayLimit": {
            "type": "number",
            "format": "double"
          },
          "spendPerMonthLimit": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "SetSessionExpireRequest": {
        "type": "object",
        "properties": {
          "sessionToken": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SetupPhysicalWalletRequest": {
        "required": [
          "physicalWalletId",
          "physicalWalletReference",
          "numberOfServerSyncing"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "physicalWalletReference": {
            "type": "string"
          },
          "numberOfServerSyncing": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SetupPhysicalWalletResultDto": {
        "required": [
          "otp"
        ],
        "type": "object",
        "properties": {
          "otp": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SetUserInfoRequest": {
        "required": [
          "firstName",
          "lastName",
          "regionId",
          "email"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "nullable": true
          },
          "postCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "mobileNumber": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "appRole": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetUserStatusRequest": {
        "required": [
          "venueId",
          "userId",
          "active",
          "validated"
        ],
        "type": "object",
        "properties": {
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "active": {
            "type": "boolean"
          },
          "validated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SignedRequest": {
        "required": [
          "serial",
          "sig"
        ],
        "type": "object",
        "properties": {
          "serial": {
            "type": "string"
          },
          "sig": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StartWorkingRequest": {
        "required": [
          "workHours",
          "workMinutes"
        ],
        "type": "object",
        "properties": {
          "workHours": {
            "type": "integer",
            "format": "int32"
          },
          "workMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "venueId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatusValues": {
        "enum": [
          "Active",
          "InActive"
        ],
        "type": "string"
      },
      "StickerPerso": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "serial": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "persoFile": {
            "type": "string",
            "nullable": true
          },
          "hasBeenUsed": {
            "type": "boolean"
          },
          "hasBeenActivated": {
            "type": "boolean"
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          },
          "p": {
            "type": "string",
            "nullable": true
          },
          "signedP": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "macAddress": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StickerPersoDto": {
        "required": [
          "serial",
          "persoFile",
          "hasBeenUsed",
          "hasBeenActivated",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "serial": {
            "type": "string"
          },
          "persoFile": {
            "type": "string"
          },
          "hasBeenUsed": {
            "type": "boolean"
          },
          "hasBeenActivated": {
            "type": "boolean"
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          },
          "p": {
            "type": "string",
            "nullable": true
          },
          "signedP": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "macAddress": {
            "type": "string",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StickerTransactionPacket": {
        "type": "object",
        "properties": {
          "transactionGUID": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "senderId": {
            "type": "string",
            "nullable": true
          },
          "receiverId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "sigs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StopWorkingRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SuccessActivateDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetStickerActivateResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddBankAccountDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddCardDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddContactDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetContactDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddCustodianCryptoDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddDeviceDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/AddDeviceResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddMerchantDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/AddMerchantResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddPrepaidAccountDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAddVenueDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/AddVenueResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessAdminDeleteUserDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessCanLoginDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CanLoginResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessChargeCardDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessClaimPendingTipsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessConfigPhysicalWalletPreAuthResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/ConfigurePreAuthResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreateCurrencyResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreateCurrencyResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreateFeeDefinitionResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreateFeeDefinitionResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreatePaymentMethodResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreatePaymentMethodResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreatePhysicalWalletPlanResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreatePhysicalWalletPlanResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreatePhysicalWalletResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreatePhysicalWalletResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreatePhysicalWalletTierResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreatePhysicalWalletTierResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreatePhysicalWalletTypeResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreatePhysicalWalletTypeResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreateRegionResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreateRegionResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreateSessionDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreateSessionResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCreateWalletTypeResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreateWalletTypeResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCurrencyDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CurrencyDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessCurrencyTypeValuesDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessDeclineUserFundRequestDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessDeepKycDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/DeepKycDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessDeepPaymentMethodDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/DeepPaymentMethodDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessDeepPhysicalWalletPlanDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/DeepPhysicalWalletPlanDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessDeepPhysicalWalletTierDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/DeepPhysicalWalletTierDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessDeepPhysicalWalletTypeDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/DeepPhysicalWalletTypeDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessDeleteMerchantDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessDeletePaymentMethodDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessDeleteUserDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessDeleteVenueDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessDeleteWalletsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessEditContactDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetContactDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessEditPaymentMethodDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessEditVenueDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/VenueDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessExchangePaymentDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessExecutePaymentPhysicalWalletResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessFeeDefinitionDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/FeeDefinitionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessFetchDevicesDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessFindUserByMobileEmailDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/FindUserByMobileEmailResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessFindUserByMobileNumberDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/FindUserByMobileNumberResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessForgotPinDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessGetActivatedStickerDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetActivatedStickerDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetAllIssuersResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetAllIssuersResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetAllStickersDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllStickersDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetAllTransactionsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllTransactionsDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetAvailableCryptoDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetAvailablePaymentMethodsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetBalanceDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetBalanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetContactsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetContactDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetConversionRatesDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetDashboardDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/DashboardInfoDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetEmailOtpDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetEmailOtpResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetExchangeRateDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/ExchangeRateDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetExchangeTransactionsAmountsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetTransactionsAmountsDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetFreeVenuesDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VenueDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetKeysDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetStickerKeysDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetLockStatusDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetLockStatusDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetMerchantsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMerchantsDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetMessagesDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChatDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPaymentMethodDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPaymentMethodInstanceSettingResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPaymentMethodInstanceSettingResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPaymentMethodsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodInstanceDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPendingTipsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPendingTipsDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPersoDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/StickerPersoDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletCvcResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletCVCResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletDynamicCvcResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletDynamicCVCResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletDynamicExpiryResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletDynamicExpiryResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletDynamicPanResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletDynamicPanResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletDynamicPinResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletDynamicPinResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletExpiryResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletExpiryResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletPanResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletPanResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletPinResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletPinResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletPreAuthResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPhysicalWalletPreAuthResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPhysicalWalletTiersResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeepPhysicalWalletTierDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetPolicyDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetPolicyDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetProfileDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserProfileDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetReceiveTransactionsAmountsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetTransactionsAmountsDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetRequestFundByIdDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetUserRequestFundDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetRequestFundsFromUsersDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserRequestFundDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetRequestFundsToUsersDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserRequestFundDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetRequestFundsViaLinkDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetRequestFundsViaLinkDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetRequestFundToUserByIdDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetUserRequestFundDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetRoamingUsersDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TipseeUserProfileDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetSendOutTransactionsAmountsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetTransactionsAmountsDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetSMSOtpDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetSMSOtpResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetStickerPinCodeDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetStickerPinCodeResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetSummaryTransactionFeeAmountsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetSummaryTransactionFeeAmountDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetTipeesByVenueIdDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTipeesByVenueIdDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetTransactionAmountsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTransactionAmountByPeriodDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetTransactionFeeAmountsByBaseCurrencyDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetTransactionFeeAmountByBaseCurrencyDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetTransactionFeeAmountsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTransactionFeeAmountByPeriodDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetTransactionNumberDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetTransactionNumberDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetTransactionsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTransactionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetUserDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/VenueUserProfileDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetUserInfoDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserSanatizeDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetUserProfileByAdminDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetUserProfileByAdminDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetUsersDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VenueUserProfileDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetVenueDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/VenueDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetVenuesByMerchantIdDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetVenuesByMerchantIdDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetVenuesDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VenueDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessGetVersionDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetVersionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetWalletDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/WalletDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessGetWorkingDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/GetTipeeWorkingDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessIsSessionActiveDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CheckSessionActiveResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessJoinVenueDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/VenueUserDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessKycDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/KycDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessLeaveVenueDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessListCountryDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListCurrencyDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CurrencyDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListDeepKycDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeepKycDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListDeepPaymentMethodDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeepPaymentMethodDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListDeepPhysicalWalletDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeepPhysicalWalletDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListDeepPhysicalWalletPlanDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeepPhysicalWalletPlanDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListDeepPhysicalWalletTierDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeepPhysicalWalletTierDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListDeepPhysicalWalletTypeDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeepPhysicalWalletTypeDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListFeeDefinitionDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeeDefinitionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListGetAllUsersDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllUsersDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListGetPaymentMethodInstanceBalanceAmountsDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPaymentMethodInstanceBalanceAmountsDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListGetServiceClassIdResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetServiceClassIdResultDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListPhysicalWalletDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListRegionDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListReturnCodesDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnCodesDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListWalletDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessListWalletTypeDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletTypeDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SuccessLockActivityDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessLockPaymentMethodDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessLoginBiometricsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserSanatizeDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessLoginPINDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserSanatizeDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessLogoutDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessPayRequestFundViaLinkDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessPayUserFundRequestDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessPhysicalWalletPersoDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PhysicalWalletPersoDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessReadMessageDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserChatDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessRefreshExchangeRatesDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessRegionDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/RegionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessRemoveContactDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessRemoveUserDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessRequestFundsViaLinkDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/RequestFundsViaLinkResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessRequestFundToUserDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/CreateRequestUserFundResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessResendEmailDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessResendSMSDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessReservePersoDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/ReservePersoResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSaveUserResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/SaveUserResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSendMessageDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserChatDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSendTipDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSendToBankDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSendToCryptoDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSendToUserDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetAuthDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/SetAuthResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetBalanceDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSetBiometricsDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSetLocationDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSetMainBankAccountDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetPaymentMethodInstanceSettingResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/SetPaymentMethodInstanceSettingResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetPhysicalWalletPaymentMethodResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/SetPhysicalWalletPaymentMethodResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetPINDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSetPolicyDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSetProfileDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserProfileDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetSessionExpireDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSetupPhysicalWalletResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/SetupPhysicalWalletResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetUserInfoDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserSanatizeDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessSetUserStatusDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSignedDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessStartWorkingDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessStopWorkingDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessSystemSettingsDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/SystemSettingsDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessTransactionDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/TransactionDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessUndoSignedDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessUnlockPaymentMethodDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessUpdateActivatedStickerDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessUpdateDeviceDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/DeviceDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessUserSanatizeDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserSanatizeDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessValidatePhysicalWalletDynamicPanResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/ValidateDynamicPhysicalWalletPanResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessVerifyEmailCodeDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessVerifyEmailDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessVerifyKycDocumentResultDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/VerifyKycDocumentResultDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessVerifyMobileDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          }
        },
        "additionalProperties": false
      },
      "SuccessVerifySMSDto": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/UserVerifySmsDto"
          }
        },
        "additionalProperties": false
      },
      "SuccessWalletTypeDtoResponse": {
        "required": [
          "code",
          "message",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "message": {
            "type": "string",
            "default": "Success"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "default": 200
          },
          "resultCount": {
            "type": "integer",
            "format": "int32",
            "default": -1
          },
          "result": {
            "$ref": "#/components/schemas/WalletTypeDto"
          }
        },
        "additionalProperties": false
      },
      "SystemSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "customerContactNumber": {
            "type": "string",
            "nullable": true
          },
          "baseCurrency": {
            "$ref": "#/components/schemas/Currency"
          },
          "baseCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "externalServiceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceSetting"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SystemSettingsDto": {
        "required": [
          "baseCurrencyId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "customerContactNumber": {
            "type": "string",
            "nullable": true
          },
          "baseCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "externalServiceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceSettingDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TipseeRoleValues": {
        "enum": [
          "Tipee",
          "Tipeer",
          "Owner",
          "Merchant"
        ],
        "type": "string"
      },
      "TipseeUserProfileDto": {
        "required": [
          "id",
          "firstName",
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "prepaidId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLine"
            },
            "nullable": true
          },
          "transactionRequestId": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "securityType": {
            "$ref": "#/components/schemas/SecurityTypeValues"
          },
          "requestUserFund": {
            "$ref": "#/components/schemas/RequestUserFund"
          },
          "currentLineTransactionLineId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "currentLine": {
            "$ref": "#/components/schemas/TransactionLine"
          },
          "requestAnonymousFund": {
            "$ref": "#/components/schemas/RequestAnonymousFundTransaction"
          }
        },
        "additionalProperties": false
      },
      "TransactionDto": {
        "required": [
          "securityType",
          "fromUserId",
          "fromUserName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "currentLineTransactionLineId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "currentLine": {
            "$ref": "#/components/schemas/TransactionLineDto"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLineDto"
            },
            "nullable": true
          },
          "paymentReference": {
            "type": "string",
            "nullable": true
          },
          "tfxProfit": {
            "type": "number",
            "format": "double"
          },
          "transactionRequestId": {
            "type": "string",
            "nullable": true
          },
          "securityType": {
            "$ref": "#/components/schemas/SecurityTypeValues"
          },
          "fromUserId": {
            "type": "string",
            "format": "uuid"
          },
          "fromUserName": {
            "type": "string"
          },
          "toUserId": {
            "type": "string",
            "format": "uuid"
          },
          "toUserName": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TransactionLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "paymentMethodFromPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethodFrom": {
            "$ref": "#/components/schemas/PaymentMethodInstance"
          },
          "paymentMethodToPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethodTo": {
            "$ref": "#/components/schemas/PaymentMethodInstance"
          },
          "currencyFromCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyFrom": {
            "$ref": "#/components/schemas/Currency"
          },
          "currencyToCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyTo": {
            "$ref": "#/components/schemas/Currency"
          },
          "amountFrom": {
            "type": "number",
            "format": "double"
          },
          "amountTo": {
            "type": "number",
            "format": "double"
          },
          "conversionRatio": {
            "type": "number",
            "format": "double"
          },
          "baseCurrencyRate": {
            "type": "number",
            "format": "double"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatusValues"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentTypeValues"
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionLineFee"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionLineDto": {
        "required": [
          "paymentMethodFromPaymentMethodInstanceId",
          "paymentMethodToPaymentMethodInstanceId",
          "currencyFromCurrencyId",
          "currencyToCurrencyId",
          "amountFrom",
          "amountTo",
          "type",
          "fromUserId",
          "fromUserFirstName",
          "fromUserLastName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "paymentMethodFromPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethodFrom": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          },
          "paymentMethodToPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethodTo": {
            "$ref": "#/components/schemas/PaymentMethodInstanceDto"
          },
          "currencyFromCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyFrom": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "currencyToCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "currencyTo": {
            "$ref": "#/components/schemas/CurrencyDto"
          },
          "amountFrom": {
            "type": "number",
            "format": "double"
          },
          "amountTo": {
            "type": "number",
            "format": "double"
          },
          "fees": {
            "type": "number",
            "format": "double"
          },
          "conversionRatio": {
            "type": "number",
            "format": "double"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatusValues"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "transactionId": {
            "type": "string",
            "format": "uuid"
          },
          "fromUserId": {
            "type": "string",
            "format": "uuid"
          },
          "fromUserFirstName": {
            "type": "string"
          },
          "fromUserMiddleName": {
            "type": "string",
            "nullable": true
          },
          "fromUserLastName": {
            "type": "string"
          },
          "fromCurrencyName": {
            "type": "string",
            "nullable": true
          },
          "toUserId": {
            "type": "string",
            "format": "uuid"
          },
          "toUserFirstName": {
            "type": "string",
            "nullable": true
          },
          "toUserMiddleName": {
            "type": "string",
            "nullable": true
          },
          "toUserLastName": {
            "type": "string",
            "nullable": true
          },
          "toCurrencyName": {
            "type": "string",
            "nullable": true
          },
          "convertedAmount": {
            "type": "number",
            "format": "double"
          },
          "convertedCurrency": {
            "type": "string",
            "nullable": true
          },
          "moneyCameFromDescription": {
            "type": "string",
            "nullable": true
          },
          "toUserFullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fromUserFullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TransactionLineFee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "transactionLineId": {
            "type": "string",
            "format": "uuid"
          },
          "transactionLine": {
            "$ref": "#/components/schemas/TransactionLine"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/FeeTypeValues"
          },
          "unit": {
            "$ref": "#/components/schemas/FeeUnitValues"
          },
          "paidBy": {
            "$ref": "#/components/schemas/FeePaidByValues"
          },
          "isChoice": {
            "type": "boolean"
          },
          "feeReference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionPeriodUnitValues": {
        "enum": [
          "Date",
          "Month",
          "Quarter",
          "Year"
        ],
        "type": "string"
      },
      "TransactionStatusValues": {
        "enum": [
          "Completed",
          "Cancelled",
          "Reversed",
          "Inprogress",
          "New",
          "Locked"
        ],
        "type": "string"
      },
      "TransactionTypeValues": {
        "enum": [
          "Exchange",
          "InternalTransfer",
          "ExternalTransferIn",
          "ExternalTransferOut"
        ],
        "type": "string"
      },
      "UnDeleteCurrencyRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UnDeletePaymentMethodRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UnDeleteRegionRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UndoSignedRequest": {
        "required": [
          "serial"
        ],
        "type": "object",
        "properties": {
          "serial": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UnlockPaymentMethodRequest": {
        "required": [
          "paymentMethodId"
        ],
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UpdateActivatedStickerRequest": {
        "required": [
          "serial",
          "macAddress",
          "signature"
        ],
        "type": "object",
        "properties": {
          "serial": {
            "type": "string"
          },
          "macAddress": {
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "signedPackage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCurrencyRequest": {
        "required": [
          "id",
          "symbol",
          "precision",
          "format"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "symbol": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "precision": {
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateDeviceRequest": {
        "required": [
          "uUID",
          "deviceToken"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "deviceToken": {
            "type": "string"
          },
          "system": {
            "type": "string",
            "nullable": true
          },
          "systemVersion": {
            "type": "string",
            "nullable": true
          },
          "brand": {
            "type": "string",
            "nullable": true
          },
          "model": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateFeeDefinitionDto": {
        "required": [
          "id",
          "fromCurrencyId",
          "toCurrencyId",
          "fromPaymentMethodType",
          "toPaymentMethodType",
          "transactionType",
          "paymentType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fromCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "toCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "fromPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "toPaymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeValues"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionTypeValues"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentTypeValues"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateFeeDefinitionValueDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateFeeDefinitionRequest": {
        "type": "object",
        "properties": {
          "feeDefinition": {
            "$ref": "#/components/schemas/UpdateFeeDefinitionDto"
          }
        },
        "additionalProperties": false
      },
      "UpdateFeeDefinitionValueCountryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "fromCountryIso": {
            "type": "string",
            "nullable": true
          },
          "toCountryIso": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateFeeDefinitionValueDto": {
        "required": [
          "description",
          "amount",
          "type",
          "unit",
          "paidBy",
          "isChoice"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currencyId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/FeeTypeValues"
          },
          "unit": {
            "$ref": "#/components/schemas/FeeUnitValues"
          },
          "paidBy": {
            "$ref": "#/components/schemas/FeePaidByValues"
          },
          "isChoice": {
            "type": "boolean"
          },
          "countries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateFeeDefinitionValueCountryDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateKycStatusRequest": {
        "required": [
          "kycId",
          "level",
          "status"
        ],
        "type": "object",
        "properties": {
          "kycId": {
            "type": "string",
            "format": "uuid"
          },
          "level": {
            "$ref": "#/components/schemas/KycLevelValues"
          },
          "status": {
            "$ref": "#/components/schemas/KycStatusValues"
          }
        },
        "additionalProperties": false
      },
      "UpdatePaymentMethodRequest": {
        "required": [
          "id",
          "name",
          "minimalTransferOutAmount",
          "minimalExchangeAmount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "canSend": {
            "type": "boolean"
          },
          "canReceive": {
            "type": "boolean"
          },
          "canExchange": {
            "type": "boolean"
          },
          "hasBalance": {
            "type": "boolean"
          },
          "canBank": {
            "type": "boolean"
          },
          "canLock": {
            "type": "boolean"
          },
          "minimalTransferOutAmount": {
            "type": "number",
            "format": "double"
          },
          "minimalExchangeAmount": {
            "type": "number",
            "format": "double"
          },
          "subCurrencyName": {
            "type": "string",
            "nullable": true
          },
          "subCurrencySymbol": {
            "type": "string",
            "nullable": true
          },
          "subCurrencyValue": {
            "type": "number",
            "format": "double"
          },
          "regionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePhysicalWalletPlanRequest": {
        "required": [
          "id",
          "price"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "UpdatePhysicalWalletTierRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ordering": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateRegionRequest": {
        "required": [
          "id",
          "name",
          "primaryCurrencyId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "primaryCurrencyId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateSettingsRequest": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/SystemSettingsDto"
          }
        },
        "additionalProperties": false
      },
      "UpdateWalletTypeRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadedFile": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "stream": {
            "$ref": "#/components/schemas/Stream"
          },
          "tmpFile": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "applicationInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationInstance"
          },
          "title": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "position": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "showNickname": {
            "type": "boolean"
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "login": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "updatedEmail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "updatedMobileNumber": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "pin": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "salt": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "clientPublicKey": {
            "type": "string",
            "nullable": true
          },
          "clientBiometricPublicKey": {
            "type": "string",
            "nullable": true
          },
          "serverPublicKey": {
            "type": "string",
            "nullable": true
          },
          "serverPrivateKey": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "address2": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "zipcode": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "state": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "role": {
            "$ref": "#/components/schemas/RoleValues"
          },
          "applicationRole": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/UserStatusValues"
          },
          "emailOTP": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "emailOTPLastSent": {
            "type": "string",
            "format": "date-time"
          },
          "referral": {
            "type": "string",
            "format": "uuid"
          },
          "mobileNumber": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "isMobileVerified": {
            "type": "boolean"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "isTempPassword": {
            "type": "boolean"
          },
          "hasBioMetricKey": {
            "type": "boolean"
          },
          "hasMainBankAccount": {
            "type": "boolean"
          },
          "contactVia": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "publicURI": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "receiveNotifications": {
            "type": "boolean"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wallet"
            },
            "nullable": true
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "nullable": true
          },
          "stickers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StickerPerso"
            },
            "nullable": true
          },
          "venues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VenueUser"
            },
            "nullable": true
          },
          "requestAnonymousFunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestAnonymousFund"
            },
            "nullable": true
          },
          "requestUserFundsBySendUser": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestUserFund"
            },
            "nullable": true
          },
          "requestUserFundsByReceiveUser": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestUserFund"
            },
            "nullable": true
          },
          "user1Chats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChat"
            },
            "nullable": true
          },
          "user2Chats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChat"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserContact"
            },
            "nullable": true
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserContact"
            },
            "nullable": true
          },
          "paymentMethodInstanceSetting": {
            "$ref": "#/components/schemas/PaymentMethodInstanceSetting"
          },
          "physicalWallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWallet"
            },
            "nullable": true
          },
          "kyc": {
            "$ref": "#/components/schemas/Kyc"
          },
          "checkByKycs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Kyc"
            },
            "nullable": true
          },
          "kycHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KycHistory"
            },
            "nullable": true
          },
          "checkByKycHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KycHistory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserChat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "user1Id": {
            "type": "string",
            "format": "uuid"
          },
          "user1": {
            "$ref": "#/components/schemas/User"
          },
          "user2Id": {
            "type": "string",
            "format": "uuid"
          },
          "user2": {
            "$ref": "#/components/schemas/User"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "user1Read": {
            "type": "boolean"
          },
          "user2Read": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageTypeValues"
          },
          "additionalInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserChatDto": {
        "required": [
          "user1Id",
          "user2Id",
          "message",
          "user1Read",
          "user2Read",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "user1Id": {
            "type": "string",
            "format": "uuid"
          },
          "user2Id": {
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "type": "string"
          },
          "user1Read": {
            "type": "boolean"
          },
          "user2Read": {
            "type": "boolean"
          },
          "userChatSessionId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChatMessageTypeValues"
          },
          "additionalInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "contactUserId": {
            "type": "string",
            "format": "uuid"
          },
          "contact": {
            "$ref": "#/components/schemas/User"
          },
          "nickName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserProfileDto": {
        "required": [
          "id",
          "firstName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSanatizeDto": {
        "required": [
          "firstName",
          "lastName",
          "email",
          "login",
          "role",
          "status",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "applicationInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "showNickname": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "updatedEmail": {
            "type": "string",
            "nullable": true
          },
          "updatedMobileNumber": {
            "type": "string",
            "nullable": true
          },
          "clientPublicKey": {
            "type": "string",
            "nullable": true
          },
          "clientBiometricPublicKey": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "role": {
            "$ref": "#/components/schemas/RoleValues"
          },
          "applicationRole": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/UserStatusValues"
          },
          "mobileNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "isMobileVerified": {
            "type": "boolean"
          },
          "isEmailVerified": {
            "type": "boolean"
          },
          "isTempPassword": {
            "type": "boolean"
          },
          "hasBioMetricKey": {
            "type": "boolean"
          },
          "hasMainBankAccount": {
            "type": "boolean"
          },
          "contactVia": {
            "type": "string",
            "nullable": true
          },
          "publicURI": {
            "type": "string",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "receiveNotifications": {
            "type": "boolean"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletDto"
            },
            "nullable": true
          },
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDto"
            },
            "nullable": true
          },
          "stickers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StickerPersoDto"
            },
            "nullable": true
          },
          "venues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VenueUserDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserStatusValues": {
        "enum": [
          "InActive",
          "Active",
          "Blocked",
          "UnVerifiedSMS",
          "UnVerifiedEmail",
          "ExpectingPassword",
          "SignUp",
          "Order",
          "UnVerifiedEmail2",
          "UnVerifiedSMS2",
          "ExpectingPassword2"
        ],
        "type": "string"
      },
      "UserVerifySmsDto": {
        "required": [
          "isUserExists"
        ],
        "type": "object",
        "properties": {
          "isUserExists": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ValidateDynamicPhysicalWalletPanResultDto": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PhysicalWalletValidateStatus"
          }
        },
        "additionalProperties": false
      },
      "ValidatePhysicalWalletDynamicCvcRequest": {
        "required": [
          "physicalWalletId",
          "cvc",
          "functionNumber"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "cvc": {
            "type": "string"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ValidatePhysicalWalletDynamicExpiryRequest": {
        "required": [
          "physicalWalletId",
          "expiry",
          "functionNumber"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "expiry": {
            "type": "string"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ValidatePhysicalWalletDynamicPanRequest": {
        "required": [
          "physicalWalletId",
          "pan",
          "functionNumber"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "pan": {
            "type": "string"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ValidatePhysicalWalletDynamicPinRequest": {
        "required": [
          "physicalWalletId",
          "pin",
          "functionNumber"
        ],
        "type": "object",
        "properties": {
          "physicalWalletId": {
            "type": "string",
            "format": "uuid"
          },
          "pin": {
            "type": "string"
          },
          "functionNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Venue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "isValidated": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "addressId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "policyActive": {
            "type": "boolean"
          },
          "minimumPercentage": {
            "type": "number",
            "format": "double"
          },
          "distributedPercentage": {
            "type": "number",
            "format": "double"
          },
          "lockVenueUntil": {
            "type": "string",
            "format": "date-time"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VenueUser"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VenueDto": {
        "required": [
          "name",
          "isValidated",
          "isActive",
          "addressId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isValidated": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "addressId": {
            "type": "string",
            "format": "uuid"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "policyActive": {
            "type": "boolean"
          },
          "minimumPercentage": {
            "type": "number",
            "format": "double"
          },
          "distributedPercentage": {
            "type": "number",
            "format": "double"
          },
          "lockVenueUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "VenueUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "venue": {
            "$ref": "#/components/schemas/Venue"
          },
          "role": {
            "$ref": "#/components/schemas/TipseeRoleValues"
          },
          "showNickname": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "isValidated": {
            "type": "boolean"
          },
          "isWorking": {
            "type": "boolean"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "workingSince": {
            "type": "string",
            "format": "date-time"
          },
          "pendingTipAmount": {
            "type": "number",
            "format": "double"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "VenueUserDto": {
        "required": [
          "venueId",
          "role",
          "showNickname",
          "isActive",
          "isValidated",
          "isWorking",
          "hours",
          "minutes",
          "userId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "venueId": {
            "type": "string",
            "format": "uuid"
          },
          "role": {
            "$ref": "#/components/schemas/TipseeRoleValues"
          },
          "showNickname": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          },
          "isValidated": {
            "type": "boolean"
          },
          "isWorking": {
            "type": "boolean"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          },
          "workingSince": {
            "type": "string",
            "format": "date-time"
          },
          "pendingTipAmount": {
            "type": "number",
            "format": "double"
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "VenueUserProfileDto": {
        "required": [
          "id",
          "firstName",
          "isValidated",
          "isWorking",
          "isActive"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "nickName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "prepaidId": {
            "type": "string",
            "nullable": true
          },
          "isValidated": {
            "type": "boolean"
          },
          "isWorking": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "VerifyEmailCodeRequest": {
        "required": [
          "email",
          "pin"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VerifyEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VerifyKycDocumentResultDto": {
        "required": [
          "kycId"
        ],
        "type": "object",
        "properties": {
          "kycId": {
            "type": "string",
            "format": "uuid"
          },
          "level": {
            "$ref": "#/components/schemas/KycLevelValues"
          },
          "status": {
            "$ref": "#/components/schemas/KycStatusValues"
          }
        },
        "additionalProperties": false
      },
      "VerifyMobileRequest": {
        "required": [
          "mobileNumber"
        ],
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "VerifySMSRequest": {
        "required": [
          "mobileNumber",
          "pin"
        ],
        "type": "object",
        "properties": {
          "mobileNumber": {
            "type": "string"
          },
          "pin": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Wallet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "type": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "selectedPaymentMethodPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "selectedPaymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodInstance"
          },
          "mainBankAccountPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "mainBankAccount": {
            "$ref": "#/components/schemas/PaymentMethodInstance"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodInstance"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WalletDto": {
        "required": [
          "name",
          "type",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "cardId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "selectedPaymentMethodPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "mainBankAccountPaymentMethodInstanceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "WalletType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "physicalWalletTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhysicalWalletType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WalletTypeDto": {
        "required": [
          "name",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "Part of the Open Banking API"
    },
    {
      "name": "Auth",
      "description": "Part of the Open Banking API"
    }
  ]
}